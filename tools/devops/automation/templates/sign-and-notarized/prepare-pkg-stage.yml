parameters:

- name: keyringPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

- name: skipESRP
  type: boolean
  default: false # only to be used when testing the CI and we do not need a signed pkg

jobs:
- job: configure
  displayName: 'Configure build'
  pool:
    vmImage: windows-latest

  variables:
    isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]

  steps:
  - template: ../common/configure.yml

- job: sign_notarize_classic
  dependsOn:
  - configure
  displayName: 'Sign & Notarize Classic'
  timeoutInMinutes: 1000
  pool:
    vmImage: internal-macos-11
  workspace:
    clean: all

  steps:
  - template: sign-and-notarized.yml
    parameters:
      keyringPass: ${{ parameters.keyringPass }}
      skipESRP: ${{ parameters.skipESRP }}

- ${{ if eq(parameters.enableDotnet, true) }}:
  - job: sign_notarize_dotnet
    dependsOn:
    - configure
    displayName: 'Sign & Notarize Dotnet'
    timeoutInMinutes: 1000
    pool:
      vmImage: internal-macos-11
    workspace:
      clean: all

    steps:
    - template: dotnet-signing.yml

- job: funnel_job
  dependsOn:
  - sign_notarize_classic
  - ${{ if eq(parameters.enableDotnet, true) }}:
    - sign_notarize_dotnet 
  displayName: 'Collect signed artifacts'
  timeoutInMinutes: 1000
  pool:
    vmImage: internal-macos-11
  workspace:
    clean: all

  steps:
  - template: funnel.yml


# This job uploads the pkgs generated by the build step in the azure blob storage. This has to be done in a different job
# because the azure blob storate tools DO NOT work on mac OS meaning that we need a bot running Windows. build uploads the contents
# to the pipeline artefacts and we download and upload to azure in this job.
- job: upload_azure_blob
  displayName: 'Upload packages to Azure & SBOM'
  timeoutInMinutes: 1000
  dependsOn:
  - funnel_job
  condition: succeeded()

  variables:
    Parameters.outputStorageUri: ''
    NUGETS_PUBLISHED: $[ dependencies.sign_notarize.outputs['nugetPublishing.NUGETS_PUBLISHED'] ]
    SKIP_NUGETS: $[ dependencies.configure.outputs['labels.skip-nugets'] ]

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: upload-azure.yml
    parameters:
      enableDotnet: ${{ parameters.enableDotnet }}
      sbomFilter: '*.nupkg;*.pkg;*.msi'

# Job that runs on a vm that downloads the artifacts information and adds a github comment pointing to the results of the build.
- job: artifacts_github_comment
  displayName: 'Publish GitHub Comment - Artifacts'
  timeoutInMinutes: 1000
  dependsOn:
  - upload_azure_blob
  condition: succeededOrFailed()
  variables:
    PR_ID: $[ dependencies.configure.outputs['labels.pr-number'] ]
    BUILD_PACKAGE: $[ dependencies.configure.outputs['labels.build-package'] ]
    TESTS_BOT: $[ stageDependencies.build_packages.build.outputs['build.TESTS_BOT'] ]  # we build in a diff bot than the ones used for the comments
    GIT_HASH: $[ stageDependencies.build_packages.build.outputs['fix_commit.GIT_HASH'] ]
  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: artifact-github-comment.yml
