# Job that will download the other artifact from the tests job and will publish them in the 
# vsdrops

###########################################################
# WARNING WARNING WARNING WARNING WARNING WARNING WARNING #
###########################################################

# This job is executed on WINDOWS! make sure you DO NOT USE
# bash or linux file paths on scripts. Another important
# details is that System.DefaultWorkingDirectory
# on mac os x points on the top dir while on windows 
# is the checked out dir

parameters:

- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

- name: vsdropsPrefix
  type: string

- name: testPrefix
  type: string 
  default: 'ios' # default context, since we started dealing with iOS devices. 

- name: provisioningFailed
  type: string 
  default: 'False'

- name: simTestsConfigurations
  type: object

steps:

- template: ../common/checkout.yml

- ${{ each label in parameters.simTestsConfigurations }}:
  - template: download-artifacts.yml 
    parameters:
      testPrefix: ${{ parameters.testPrefix }}
      label: ${{ label }}

# build a message with all the content of all tests, to do so, we get the labels and to pass them to pwsh we do a join with ;
# as the separator
- pwsh: |
    $env:VSDROPS_INDEX="$Env:VSDROPSPREFIX/$Env:BUILD_BUILDNUMBER/$Env:BUILD_BUILDID/$Env:DEVICE_PREFIX/;/tests/vsdrops_index.html"
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $response = New-GitHubSummaryComment -Context "$Env:CONTEXT" -TestSummaryPath "$Env:TESTS_SUMMARY" -DeviceTest
    $labels = "$Env:LABELS".Split(";")
    foreach ($label in $labels) {
      $status = Get-ChildItem -Path "Env:TESTS_JOBSTATUS_$($label.ToUpper())"
      $testSummaryPath= Get-ChildItem -Path "Env:TEST_SUMMARY_PATH_$($label.ToUpper())"
      $htmlReportPath = Get-ChildItem -Path "Env:HTML_REPORT_PATH_$($label.ToUpper())"
      Write-Host "Test results for $label status: $($status.Value)"
      Write-Host "Test summary path for $label: $($testSummaryPath.Value)"
      Write-Host "Html report path for $label: $($htmlReportPath.Value)"
    }

    Write-Host $response
    if($Env:TESTS_JOBSTATUS -ne "Succeeded")
    {
      Set-PipelineResult -Status partiallySucceeded
    }
  env:
    LABELS: ${{ join(';', parameters.simTestsConfigurations) }}
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    DEVICE_PREFIX: ${{ parameters.testPrefix }}
    GITHUB_TOKEN: $(GitHub.Token)
    TESTS_JOBSTATUS: $(TESTS_JOBSTATUS) # set by the runTests step
    TESTS_SUMMARY: $(TEST_SUMMARY_PATH)
    ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Add summaries'
  condition: always()
  timeoutInMinutes: 15
