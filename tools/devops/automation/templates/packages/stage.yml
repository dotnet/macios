# template that contains all the different steps to create a pkgs, publish the results and provide feedback to the 
# developers in github.

jobs:
- job: configure
  displayName: 'Configure build'
  pool:
    vmImage: ubuntu-latest

  steps:
  - template: configure.yml

- job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
  pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
    vmImage: ubuntu-latest
  steps:
  - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

  # Selects appropriate agent pool based on trigger type (PR or CI)
  - template: ../agent-pool-selector.yml

- job: build
  dependsOn:
  - AgentPoolSelector
  - configure
  displayName: 'Build packages'
  timeoutInMinutes: 1000
  variables:
    AgentPoolComputed: $[ dependencies.AgentPoolSelector.outputs['setAgentPool.AgentPoolComputed'] ]
    # add all the variables that have been parsed by the configuration step. Could we have a less verbose way??
    # 
    # build-package
    # run-internal-tests
    # skip-packages
    # skip-nugets
    # skip-signing
    # skip-external-tests
    # trigger-device-tests
    # run-sample-tests
    # skip-packaged-xamarin-mac-tests
    BuildPackage: $[ dependencies.configure.outputs['labels.build-package'] ]
    RunInternalTests: $[ dependencies.configure.outputs['labels.run-internal-tests'] ]
    SkipPackages: $[ dependencies.configure.outputs['labels.skip-packages'] ]
    SkipNugets: $[ dependencies.configure.outputs['labels.skip-nugets'] ]
    SkipSigning: $[ dependencies.configure.outputs['labels.skip-signing'] ]
    SkipExternalTests: $[ dependencies.configure.outputs['labels.skip-external-tests'] ]
    TriggerDeviceTests: $[ dependencies.configure.outputs['labels.trigger-device-tests'] ]
    RunSampleTests: $[ dependencies.configure.outputs['labels.run-sample-tests'] ]
    SkipPackagedXamarinMacTests: $[ dependencies.configure.outputs['labels.skip-packaged-xamarin-mac-tests'] ]
    SkipPublicJenkins: $[ dependencies.configure.outputs['labels.skip-public-jenkins'] ]
    SkipApiComparison: $[ dependencies.configure.outputs['labels.skip-api-comparison'] ]
  pool:
    name: $(AgentPoolComputed)
    demands:
    - Agent.OS -equals Darwin
    - Agent.OSVersion -equals 10.15
  workspace:
    clean: all

  steps:
  - template: build.yml

- job: upload_azure_blob
  displayName: 'Upload packages to Azure'
  timeoutInMinutes: 1000
  dependsOn: build # can start as soon as the tests are done
  condition: and(succeeded(), eq (dependencies.build.outputs['configuration.BuildPkgs'], 'True')) # only run when we do have pkgs

  variables:
    Parameters.outputStorageUri: ''

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: upload-azure.yml

- job: upload_vsdrops
  displayName: 'Upload test results to VSDrops'
  timeoutInMinutes: 1000
  dependsOn: build # can start as soon as the tests are done
  condition: and(succeededOrFailed() , eq (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: ../common/upload-vsdrops.yml
    parameters:
      devicePrefix: sim

- job: upload_vsts_tests
  displayName: 'Upload xml to vsts'
  timeoutInMinutes: 1000
  dependsOn:  build # can start as soon as the tests are done
  condition: and(succeededOrFailed() , eq (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests
  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: ../common/upload-vsts-tests.yml
    parameters:
      devicePrefix: sim