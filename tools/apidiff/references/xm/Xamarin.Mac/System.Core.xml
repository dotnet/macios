<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="System.Core" version="2.0.5.0">
    <attributes>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Runtime.CompilerServices.ExtensionAttribute" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Action" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Action`2" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Action`3" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Action`4" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Func`1" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Func`2" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Func`3" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Func`4" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Func`5" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.InvalidTimeZoneException" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Security.Cryptography.Aes" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.TimeZoneInfo" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.TimeZoneNotFoundException" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Threading.LazyThreadSafetyMode" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
        <properties>
          <property name="Destination" value="System.Lazy`1" />
        </properties>
      </attribute>
      <attribute name="System.CLSCompliantAttribute">
        <properties>
          <property name="IsCompliant" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Diagnostics.DebuggableAttribute">
        <properties>
          <property name="IsJITTrackingEnabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="IsJITOptimizerDisabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="DebuggingFlags" value="IgnoreSymbolStoreSequencePoints" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCompanyAttribute">
        <properties>
          <property name="Company" value="Mono development team" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCopyrightAttribute">
        <properties>
          <property name="Copyright" value="(c) Various Mono authors" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDefaultAliasAttribute">
        <properties>
          <property name="DefaultAlias" value="System.Core.dll" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDelaySignAttribute">
        <properties>
          <property name="DelaySign" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDescriptionAttribute">
        <properties>
          <property name="Description" value="System.Core.dll" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyFileVersionAttribute">
        <properties>
          <property name="Version" value="4.0.50524.0" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyInformationalVersionAttribute">
        <properties>
          <property name="InformationalVersion" value="4.0.50524.0" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyKeyFileAttribute">
        <properties>
          <property name="KeyFile" value="../silverlight.pub" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyProductAttribute">
        <properties>
          <property name="Product" value="Mono Common Language Infrastructure" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyTitleAttribute">
        <properties>
          <property name="Title" value="System.Core.dll" />
        </properties>
      </attribute>
      <attribute name="System.Resources.NeutralResourcesLanguageAttribute">
        <properties>
          <property name="CultureName" value="en-US" />
        </properties>
      </attribute>
      <attribute name="System.Resources.SatelliteContractVersionAttribute">
        <properties>
          <property name="Version" value="2.0.5.0" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
      <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
        <properties>
          <property name="WrapNonExceptionThrows" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
        <properties>
          <property name="Value" value="False" />
        </properties>
      </attribute>
    </attributes>
    <namespaces>
      <namespace name="Microsoft.Win32.SafeHandles">
        <classes>
          <class name="SafeMemoryMappedFileHandle" type="class" base="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.IntPtr, System.Boolean)" attrib="6278">
                <parameters>
                  <parameter name="preexistingHandle" position="0" attrib="0" type="System.IntPtr" />
                  <parameter name="ownsHandle" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ReleaseHandle()" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <attributes />
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SafeMemoryMappedViewHandle" type="class" base="System.Runtime.InteropServices.SafeBuffer" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <methods>
              <method name="ReleaseHandle()" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System">
        <classes>
          <class name="Action`10" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="callback" position="10" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="11" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`11" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="callback" position="11" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="12" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`12" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="callback" position="12" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="13" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`13" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="callback" position="13" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="14" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`14" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="callback" position="14" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="15" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`15" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
              <generic-parameter name="T15" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="callback" position="15" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="16" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`16" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
              <generic-parameter name="T15" attributes="2" />
              <generic-parameter name="T16" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="arg16" position="15" attrib="0" type="T16" />
                  <parameter name="callback" position="16" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="17" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="arg16" position="15" attrib="0" type="T16" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Action`9" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="callback" position="9" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="10" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`10" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="callback" position="9" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="10" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`11" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="callback" position="10" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="11" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`12" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="callback" position="11" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="12" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`13" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="callback" position="12" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="13" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`14" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="callback" position="13" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="14" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`15" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="callback" position="14" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="15" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`16" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
              <generic-parameter name="T15" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="callback" position="15" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="16" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Func`17" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T1" attributes="2" />
              <generic-parameter name="T2" attributes="2" />
              <generic-parameter name="T3" attributes="2" />
              <generic-parameter name="T4" attributes="2" />
              <generic-parameter name="T5" attributes="2" />
              <generic-parameter name="T6" attributes="2" />
              <generic-parameter name="T7" attributes="2" />
              <generic-parameter name="T8" attributes="2" />
              <generic-parameter name="T9" attributes="2" />
              <generic-parameter name="T10" attributes="2" />
              <generic-parameter name="T11" attributes="2" />
              <generic-parameter name="T12" attributes="2" />
              <generic-parameter name="T13" attributes="2" />
              <generic-parameter name="T14" attributes="2" />
              <generic-parameter name="T15" attributes="2" />
              <generic-parameter name="T16" attributes="2" />
              <generic-parameter name="TResult" attributes="1" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="arg16" position="15" attrib="0" type="T16" />
                  <parameter name="callback" position="16" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="17" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)" attrib="454" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="T1" />
                  <parameter name="arg2" position="1" attrib="0" type="T2" />
                  <parameter name="arg3" position="2" attrib="0" type="T3" />
                  <parameter name="arg4" position="3" attrib="0" type="T4" />
                  <parameter name="arg5" position="4" attrib="0" type="T5" />
                  <parameter name="arg6" position="5" attrib="0" type="T6" />
                  <parameter name="arg7" position="6" attrib="0" type="T7" />
                  <parameter name="arg8" position="7" attrib="0" type="T8" />
                  <parameter name="arg9" position="8" attrib="0" type="T9" />
                  <parameter name="arg10" position="9" attrib="0" type="T10" />
                  <parameter name="arg11" position="10" attrib="0" type="T11" />
                  <parameter name="arg12" position="11" attrib="0" type="T12" />
                  <parameter name="arg13" position="12" attrib="0" type="T13" />
                  <parameter name="arg14" position="13" attrib="0" type="T14" />
                  <parameter name="arg15" position="14" attrib="0" type="T15" />
                  <parameter name="arg16" position="15" attrib="0" type="T16" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Collections.Generic">
        <classes>
          <class name="HashSet`1" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="Count = {Count}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Collections.Generic.HashSetDebugView`1" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.ISet`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEqualityComparer`1[T])" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T], System.Collections.Generic.IEqualityComparer`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Comparer" attrib="0" ptype="System.Collections.Generic.IEqualityComparer`1[T]">
                <methods>
                  <method name="get_Comparer()" attrib="2182" returntype="System.Collections.Generic.IEqualityComparer`1[T]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="CreateSetComparer()" attrib="150" static="true" returntype="System.Collections.Generic.IEqualityComparer`1[System.Collections.Generic.HashSet`1[T]]">
                <parameters />
              </method>
              <method name="ExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="134" returntype="System.Collections.Generic.HashSet`1+Enumerator[T]">
                <parameters />
              </method>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="16838" virtual="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Security.SecurityCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
              <method name="IntersectWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsProperSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSubsetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="IsSupersetOf(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="OnDeserialization(System.Object)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="sender" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Overlaps(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="RemoveWhere(System.Predicate`1[T])" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="match" position="0" attrib="0" type="System.Predicate`1[T]" />
                </parameters>
              </method>
              <method name="SetEquals(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="SymmetricExceptWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
              <method name="TrimExcess()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="UnionWith(System.Collections.Generic.IEnumerable`1[T])" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="Enumerator" type="struct" base="System.ValueType" sealed="true" serializable="true" charset="Ansi" layout="Sequential">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[T]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                </interfaces>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
                <properties>
                  <property name="Current" attrib="0" ptype="T">
                    <methods>
                      <method name="get_Current()" attrib="2534" virtual="true" returntype="T">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                    <parameters />
                  </method>
                  <method name="MoveNext()" attrib="486" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </class>
            </classes>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Dynamic">
        <classes>
          <class name="BinaryOperationBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Linq.Expressions.ExpressionType)" attrib="6276">
                <parameters>
                  <parameter name="operation" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Operation" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_Operation()" attrib="2182" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackBinaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="arg" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackBinaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="arg" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BindingRestrictions" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerDisplayAttribute">
                <properties>
                  <property name="Value" value="{DebugView}" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Dynamic.BindingRestrictions/BindingRestrictionsProxy" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Empty" attrib="54" fieldtype="System.Dynamic.BindingRestrictions" />
            </fields>
            <methods>
              <method name="Combine(System.Collections.Generic.IList`1[System.Dynamic.DynamicMetaObject])" attrib="150" static="true" returntype="System.Dynamic.BindingRestrictions">
                <parameters>
                  <parameter name="contributingObjects" position="0" attrib="0" type="System.Collections.Generic.IList`1[System.Dynamic.DynamicMetaObject]" />
                </parameters>
              </method>
              <method name="GetExpressionRestriction(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Dynamic.BindingRestrictions">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="GetInstanceRestriction(System.Linq.Expressions.Expression, System.Object)" attrib="150" static="true" returntype="System.Dynamic.BindingRestrictions">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="instance" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetTypeRestriction(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Dynamic.BindingRestrictions">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Merge(System.Dynamic.BindingRestrictions)" attrib="134" returntype="System.Dynamic.BindingRestrictions">
                <parameters>
                  <parameter name="restrictions" position="0" attrib="0" type="System.Dynamic.BindingRestrictions" />
                </parameters>
              </method>
              <method name="ToExpression()" attrib="134" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CallInfo" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32, System.Collections.Generic.IEnumerable`1[System.String])" attrib="6278">
                <parameters>
                  <parameter name="argCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="argNames" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.String]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.String[])" attrib="6278">
                <parameters>
                  <parameter name="argCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="argNames" position="1" attrib="0" type="System.String[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ArgumentCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ArgumentCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ArgumentNames" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.String]">
                <methods>
                  <method name="get_ArgumentNames()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Equals(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GetHashCode()" attrib="198" virtual="true" is-override="true" returntype="System.Int32">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ConvertBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type, System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="explicit" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Explicit" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Explicit()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackConvert(System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackConvert(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CreateInstanceBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="callInfo" position="0" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackCreateInstance(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackCreateInstance(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DeleteIndexBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="callInfo" position="0" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackDeleteIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackDeleteIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DeleteMemberBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackDeleteMember(System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackDeleteMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DynamicMetaObject" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="EmptyMetaObjects" attrib="54" fieldtype="System.Dynamic.DynamicMetaObject[]" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions)" attrib="6278">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="restrictions" position="1" attrib="0" type="System.Dynamic.BindingRestrictions" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="restrictions" position="1" attrib="0" type="System.Dynamic.BindingRestrictions" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasValue" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasValue()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LimitType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_LimitType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Restrictions" attrib="0" ptype="System.Dynamic.BindingRestrictions">
                <methods>
                  <method name="get_Restrictions()" attrib="2182" returntype="System.Dynamic.BindingRestrictions">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RuntimeType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_RuntimeType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="BindBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Dynamic.DynamicMetaObject)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.BinaryOperationBinder" />
                  <parameter name="arg" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="BindConvert(System.Dynamic.ConvertBinder)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.ConvertBinder" />
                </parameters>
              </method>
              <method name="BindCreateInstance(System.Dynamic.CreateInstanceBinder, System.Dynamic.DynamicMetaObject[])" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.CreateInstanceBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="BindDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Dynamic.DynamicMetaObject[])" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.DeleteIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="BindDeleteMember(System.Dynamic.DeleteMemberBinder)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.DeleteMemberBinder" />
                </parameters>
              </method>
              <method name="BindGetIndex(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject[])" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.GetIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="BindGetMember(System.Dynamic.GetMemberBinder)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.GetMemberBinder" />
                </parameters>
              </method>
              <method name="BindInvoke(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject[])" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.InvokeBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="BindInvokeMember(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject[])" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.InvokeMemberBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="BindSetIndex(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.SetIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="value" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="BindSetMember(System.Dynamic.SetMemberBinder, System.Dynamic.DynamicMetaObject)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.SetMemberBinder" />
                  <parameter name="value" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="BindUnaryOperation(System.Dynamic.UnaryOperationBinder)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.UnaryOperationBinder" />
                </parameters>
              </method>
              <method name="Create(System.Object, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="GetDynamicMemberNames()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DynamicMetaObjectBinder" type="class" base="System.Runtime.CompilerServices.CallSiteBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2502" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="Bind(System.Object[], System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression], System.Linq.Expressions.LabelTarget)" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="returnLabel" position="2" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Defer(System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Defer(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetUpdateExpression(System.Type)" attrib="134" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DynamicObject" type="class" base="System.Object" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Dynamic.IDynamicMetaObjectProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetDynamicMemberNames()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[System.String]">
                <parameters />
              </method>
              <method name="GetMetaObject(System.Linq.Expressions.Expression)" attrib="454" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.BinaryOperationBinder" />
                  <parameter name="arg" position="1" attrib="0" type="System.Object" />
                  <parameter name="result" position="2" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryConvert(System.Dynamic.ConvertBinder, out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.ConvertBinder" />
                  <parameter name="result" position="1" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.CreateInstanceBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="result" position="2" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.DeleteIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="TryDeleteMember(System.Dynamic.DeleteMemberBinder)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.DeleteMemberBinder" />
                </parameters>
              </method>
              <method name="TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.GetIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="result" position="2" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryGetMember(System.Dynamic.GetMemberBinder, out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.GetMemberBinder" />
                  <parameter name="result" position="1" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryInvoke(System.Dynamic.InvokeBinder, System.Object[], out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.InvokeBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="result" position="2" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.InvokeMemberBinder" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="result" position="2" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.SetIndexBinder" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="value" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="TrySetMember(System.Dynamic.SetMemberBinder, System.Object)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.SetMemberBinder" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="TryUnaryOperation(System.Dynamic.UnaryOperationBinder, out System.Object&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Dynamic.UnaryOperationBinder" />
                  <parameter name="result" position="1" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExpandoObject" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[System.String,System.Object]]" />
              <interface name="System.Collections.Generic.IDictionary`2[System.String,System.Object]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[System.String,System.Object]]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.ComponentModel.INotifyPropertyChanged" />
              <interface name="System.Dynamic.IDynamicMetaObjectProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="GetIndexBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="callInfo" position="0" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackGetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackGetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GetMemberBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="FallbackGetMember(System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackGetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDynamicMetaObjectProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetMetaObject(System.Linq.Expressions.Expression)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IInvokeOnGetBinder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="InvokeOnGet" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_InvokeOnGet()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="InvokeBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="callInfo" position="0" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="InvokeMemberBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Boolean, System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="callInfo" position="2" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IgnoreCase" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackInvoke(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackInvokeMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackInvokeMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SetIndexBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Dynamic.CallInfo)" attrib="6276">
                <parameters>
                  <parameter name="callInfo" position="0" attrib="0" type="System.Dynamic.CallInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CallInfo" attrib="0" ptype="System.Dynamic.CallInfo">
                <methods>
                  <method name="get_CallInfo()" attrib="2182" returntype="System.Dynamic.CallInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackSetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="value" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackSetIndex(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                  <parameter name="value" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="3" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SetMemberBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Boolean)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackSetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="value" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackSetMember(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="value" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="2" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UnaryOperationBinder" type="class" base="System.Dynamic.DynamicMetaObjectBinder" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Linq.Expressions.ExpressionType)" attrib="6276">
                <parameters>
                  <parameter name="operation" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Operation" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_Operation()" attrib="2182" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject[])" attrib="230" virtual="true" sealed="true" is-override="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="args" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject[]" />
                </parameters>
              </method>
              <method name="FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)" attrib="134" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
              <method name="FallbackUnaryOperation(System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject)" attrib="1478" abstract="true" virtual="true" returntype="System.Dynamic.DynamicMetaObject">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                  <parameter name="errorSuggestion" position="1" attrib="0" type="System.Dynamic.DynamicMetaObject" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.IO">
        <classes>
          <class name="HandleInheritability" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Inheritable" attrib="32854" fieldtype="System.IO.HandleInheritability" value="1" />
              <field name="None" attrib="32854" fieldtype="System.IO.HandleInheritability" value="0" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="System.IO.MemoryMappedFiles">
        <classes>
          <class name="MemoryMappedFile" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="SafeMemoryMappedFileHandle" attrib="0" ptype="Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
                <attributes />
                <methods>
                  <method name="get_SafeMemoryMappedFileHandle()" attrib="2182" returntype="Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateFromFile(System.String)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateFromFile(System.String, System.IO.FileMode)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.FileMode" />
                </parameters>
              </method>
              <method name="CreateFromFile(System.String, System.IO.FileMode, System.String)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.FileMode" />
                  <parameter name="mapName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.FileMode" />
                  <parameter name="mapName" position="2" attrib="0" type="System.String" />
                  <parameter name="capacity" position="3" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                  <parameter name="mode" position="1" attrib="0" type="System.IO.FileMode" />
                  <parameter name="mapName" position="2" attrib="0" type="System.String" />
                  <parameter name="capacity" position="3" attrib="0" type="System.Int64" />
                  <parameter name="access" position="4" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                </parameters>
              </method>
              <method name="CreateFromFile(System.IO.FileStream, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity, System.IO.HandleInheritability, System.Boolean)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="fileStream" position="0" attrib="0" type="System.IO.FileStream" />
                  <parameter name="mapName" position="1" attrib="0" type="System.String" />
                  <parameter name="capacity" position="2" attrib="0" type="System.Int64" />
                  <parameter name="access" position="3" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                  <parameter name="memoryMappedFileSecurity" position="4" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />
                  <parameter name="inheritability" position="5" attrib="0" type="System.IO.HandleInheritability" />
                  <parameter name="leaveOpen" position="6" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="CreateNew(System.String, System.Int64)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                </parameters>
              </method>
              <method name="CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity, System.IO.HandleInheritability)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                  <parameter name="options" position="3" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileOptions" />
                  <parameter name="memoryMappedFileSecurity" position="4" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />
                  <parameter name="inheritability" position="5" attrib="0" type="System.IO.HandleInheritability" />
                </parameters>
              </method>
              <method name="CreateOrOpen(System.String, System.Int64)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                </parameters>
              </method>
              <method name="CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.MemoryMappedFiles.MemoryMappedFileSecurity, System.IO.HandleInheritability)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="capacity" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                  <parameter name="options" position="3" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileOptions" />
                  <parameter name="memoryMappedFileSecurity" position="4" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />
                  <parameter name="inheritability" position="5" attrib="0" type="System.IO.HandleInheritability" />
                </parameters>
              </method>
              <method name="CreateViewAccessor()" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
                <parameters />
              </method>
              <method name="CreateViewAccessor(System.Int64, System.Int64)" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="size" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="CreateViewAccessor(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="size" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                </parameters>
              </method>
              <method name="CreateViewStream()" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewStream">
                <parameters />
              </method>
              <method name="CreateViewStream(System.Int64, System.Int64)" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewStream">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="size" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="CreateViewStream(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedViewStream">
                <parameters>
                  <parameter name="offset" position="0" attrib="0" type="System.Int64" />
                  <parameter name="size" position="1" attrib="0" type="System.Int64" />
                  <parameter name="access" position="2" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
                </parameters>
              </method>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetAccessControl()" attrib="134" returntype="System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
                <attributes />
                <parameters />
              </method>
              <method name="OpenExisting(System.String)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="desiredAccessRights" position="1" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileRights" />
                </parameters>
              </method>
              <method name="OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights, System.IO.HandleInheritability)" attrib="150" static="true" returntype="System.IO.MemoryMappedFiles.MemoryMappedFile">
                <attributes />
                <parameters>
                  <parameter name="mapName" position="0" attrib="0" type="System.String" />
                  <parameter name="desiredAccessRights" position="1" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileRights" />
                  <parameter name="inheritability" position="2" attrib="0" type="System.IO.HandleInheritability" />
                </parameters>
              </method>
              <method name="SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)" attrib="134" returntype="System.Void">
                <attributes />
                <parameters>
                  <parameter name="memoryMappedFileSecurity" position="0" attrib="0" type="System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemoryMappedFileAccess" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="CopyOnWrite" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="3" />
              <field name="Read" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="1" />
              <field name="ReadExecute" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="4" />
              <field name="ReadWrite" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="0" />
              <field name="ReadWriteExecute" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="5" />
              <field name="Write" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileAccess" value="2" />
            </fields>
          </class>
          <class name="MemoryMappedFileOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="DelayAllocatePages" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileOptions" value="67108864" />
              <field name="None" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileOptions" value="0" />
            </fields>
          </class>
          <class name="MemoryMappedFileRights" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <attributes>
              <attribute name="System.FlagsAttribute" />
            </attributes>
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AccessSystemSecurity" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="16777216" />
              <field name="ChangePermissions" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="262144" />
              <field name="CopyOnWrite" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="1" />
              <field name="Delete" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="65536" />
              <field name="Execute" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="8" />
              <field name="FullControl" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="983055" />
              <field name="Read" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="4" />
              <field name="ReadExecute" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="12" />
              <field name="ReadPermissions" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="131072" />
              <field name="ReadWrite" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="6" />
              <field name="ReadWriteExecute" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="14" />
              <field name="TakeOwnership" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="524288" />
              <field name="Write" attrib="32854" fieldtype="System.IO.MemoryMappedFiles.MemoryMappedFileRights" value="2" />
            </fields>
          </class>
          <class name="MemoryMappedFileSecurity" type="class" base="System.Security.AccessControl.ObjectSecurity`1[System.IO.MemoryMappedFiles.MemoryMappedFileRights]" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="MemoryMappedViewAccessor" type="class" base="System.IO.UnmanagedMemoryAccessor" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="PointerOffset" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PointerOffset()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SafeMemoryMappedViewHandle" attrib="0" ptype="Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
                <methods>
                  <method name="get_SafeMemoryMappedViewHandle()" attrib="18566" returntype="Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
                    <attributes>
                      <attribute name="System.Security.SecurityCriticalAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Security.SecuritySafeCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Flush()" attrib="134" returntype="System.Void">
                <attributes>
                  <attribute name="System.Security.SecurityCriticalAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MemoryMappedViewStream" type="class" base="System.IO.UnmanagedMemoryStream" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <properties>
              <property name="PointerOffset" attrib="0" ptype="System.Int64">
                <methods>
                  <method name="get_PointerOffset()" attrib="2182" returntype="System.Int64">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SafeMemoryMappedViewHandle" attrib="0" ptype="Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
                <methods>
                  <method name="get_SafeMemoryMappedViewHandle()" attrib="18566" returntype="Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
                    <attributes>
                      <attribute name="System.Security.SecurityCriticalAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Security.SecuritySafeCriticalAttribute" />
                </attributes>
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Security.SecurityCriticalAttribute" />
                </attributes>
                <parameters />
              </method>
              <method name="SetLength(System.Int64)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Linq">
        <classes>
          <class name="Enumerable" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            </attributes>
            <methods>
              <method name="Aggregate(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,TSource,TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="func" position="1" attrib="0" type="System.Func`3[TSource,TSource,TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Collections.Generic.IEnumerable`1[TSource], TAccumulate, System.Func`3[TAccumulate,TSource,TAccumulate])" attrib="150" static="true" returntype="TAccumulate">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Collections.Generic.IEnumerable`1[TSource], TAccumulate, System.Func`3[TAccumulate,TSource,TAccumulate], System.Func`2[TAccumulate,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`2[TAccumulate,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="All(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsEnumerable(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Int32])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Int64])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cast(System.Collections.IEnumerable)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Collections.Generic.IEnumerable`1[TSource], TSource)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="value" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Collections.Generic.IEnumerable`1[TSource], TSource, System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="value" position="1" attrib="0" type="TSource" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Collections.Generic.IEnumerable`1[TSource], TSource)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="defaultValue" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAt(System.Collections.Generic.IEnumerable`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAtOrDefault(System.Collections.Generic.IEnumerable`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]" />
                  <parameter name="comparer" position="4" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Collections.Generic.IEnumerable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Collections.Generic.IEnumerable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Collections.Generic.IEnumerable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Collections.Generic.IEnumerable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfType(System.Collections.IEnumerable)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Range(System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[System.Int32]">
                <parameters>
                  <parameter name="start" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Repeat(TResult, System.Int32)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <parameters>
                  <parameter name="element" position="0" attrib="0" type="TResult" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reverse(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]], System.Func`3[TSource,TCollection,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TSource,TCollection,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]], System.Func`3[TSource,TCollection,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TSource,TCollection,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Skip(System.Collections.Generic.IEnumerable`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Take(System.Collections.Generic.IEnumerable`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.IOrderedEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.IOrderedEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.IOrderedEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.IOrderedEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="TSource[]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.List`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Collections.Generic.IEnumerable`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(System.Collections.Generic.IEnumerable`1[TFirst], System.Collections.Generic.IEnumerable`1[TSecond], System.Func`3[TFirst,TSecond,TResult])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TFirst]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSecond]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TFirst,TSecond,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TFirst" attributes="0" />
                  <generic-parameter name="TSecond" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="EnumerableExecutor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="EnumerableExecutor`1" type="class" base="System.Linq.EnumerableExecutor" charset="Ansi" layout="Auto">
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Linq.Expressions.Expression)" attrib="6278">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="EnumerableQuery" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="EnumerableQuery`1" type="class" base="System.Linq.EnumerableQuery" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.IOrderedQueryable" />
              <interface name="System.Linq.IOrderedQueryable`1[T]" />
              <interface name="System.Linq.IQueryProvider" />
              <interface name="System.Linq.IQueryable" />
              <interface name="System.Linq.IQueryable`1[T]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="enumerable" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Linq.Expressions.Expression)" attrib="6278">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="IGrouping`2" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[TElement]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="1" />
              <generic-parameter name="TElement" attributes="1" />
            </generic-parameters>
            <properties>
              <property name="Key" attrib="0" ptype="TKey">
                <methods>
                  <method name="get_Key()" attrib="3526" abstract="true" virtual="true" returntype="TKey">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ILookup`2" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TElement]]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="0" />
              <generic-parameter name="TElement" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[TElement]" params="TKey">
                <methods>
                  <method name="get_Item(TKey)" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[TElement]">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Contains(TKey)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IOrderedEnumerable`1" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[TElement]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TElement" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="CreateOrderedEnumerable(System.Func`2[TElement,TKey], System.Collections.Generic.IComparer`1[TKey], System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.IOrderedEnumerable`1[TElement]">
                <parameters>
                  <parameter name="keySelector" position="0" attrib="0" type="System.Func`2[TElement,TKey]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                  <parameter name="descending" position="2" attrib="0" type="System.Boolean" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="IOrderedQueryable" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.IQueryable" />
            </interfaces>
          </class>
          <class name="IOrderedQueryable`1" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.IOrderedQueryable" />
              <interface name="System.Linq.IQueryable" />
              <interface name="System.Linq.IQueryable`1[T]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="1" />
            </generic-parameters>
          </class>
          <class name="IQueryProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="CreateQuery(System.Linq.Expressions.Expression)" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.IQueryable">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="CreateQuery(System.Linq.Expressions.Expression)" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.IQueryable`1[TElement]">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Execute(System.Linq.Expressions.Expression)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Execute(System.Linq.Expressions.Expression)" attrib="1478" abstract="true" virtual="true" returntype="TResult">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="IQueryable" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="ElementType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ElementType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="3526" abstract="true" virtual="true" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Provider" attrib="0" ptype="System.Linq.IQueryProvider">
                <methods>
                  <method name="get_Provider()" attrib="3526" abstract="true" virtual="true" returntype="System.Linq.IQueryProvider">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IQueryable`1" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.IQueryable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="1" />
            </generic-parameters>
          </class>
          <class name="Lookup`2" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TElement]]" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Linq.ILookup`2[TKey,TElement]" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TKey" attributes="0" />
              <generic-parameter name="TElement" attributes="0" />
            </generic-parameters>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Collections.Generic.IEnumerable`1[TElement]" params="TKey">
                <methods>
                  <method name="get_Item(TKey)" attrib="2534" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[TElement]">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="TKey" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyResultSelector(System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult])" attrib="134" returntype="System.Collections.Generic.IEnumerable`1[TResult]">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerHiddenAttribute" />
                </attributes>
                <parameters>
                  <parameter name="resultSelector" position="0" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(TKey)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="TKey" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Diagnostics.DebuggerHiddenAttribute" />
                </attributes>
                <parameters />
              </method>
            </methods>
          </class>
          <class name="OrderedParallelQuery`1" type="class" base="System.Linq.ParallelQuery`1[TSource]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[TSource]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TSource" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="GetEnumerator()" attrib="198" virtual="true" is-override="true" returntype="System.Collections.Generic.IEnumerator`1[TSource]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ParallelEnumerable" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            </attributes>
            <methods>
              <method name="Aggregate(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,TSource,TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="func" position="1" attrib="0" type="System.Func`3[TSource,TSource,TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.ParallelQuery`1[TSource], TAccumulate, System.Func`3[TAccumulate,TSource,TAccumulate])" attrib="150" static="true" returntype="TAccumulate">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.ParallelQuery`1[TSource], TAccumulate, System.Func`3[TAccumulate,TSource,TAccumulate], System.Func`2[TAccumulate,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`2[TAccumulate,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.ParallelQuery`1[TSource], System.Func`1[TAccumulate], System.Func`3[TAccumulate,TSource,TAccumulate], System.Func`3[TAccumulate,TAccumulate,TAccumulate], System.Func`2[TAccumulate,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="seedFactory" position="1" attrib="0" type="System.Func`1[TAccumulate]" />
                  <parameter name="updateAccumulatorFunc" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                  <parameter name="combineAccumulatorsFunc" position="3" attrib="0" type="System.Func`3[TAccumulate,TAccumulate,TAccumulate]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`2[TAccumulate,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.ParallelQuery`1[TSource], TAccumulate, System.Func`3[TAccumulate,TSource,TAccumulate], System.Func`3[TAccumulate,TAccumulate,TAccumulate], System.Func`2[TAccumulate,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="updateAccumulatorFunc" position="2" attrib="0" type="System.Func`3[TAccumulate,TSource,TAccumulate]" />
                  <parameter name="combineAccumulatorsFunc" position="3" attrib="0" type="System.Func`3[TAccumulate,TAccumulate,TAccumulate]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`2[TAccumulate,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="All(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsEnumerable(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsOrdered(System.Linq.ParallelQuery)" attrib="150" static="true" returntype="System.Linq.ParallelQuery">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery" />
                </parameters>
              </method>
              <method name="AsOrdered(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsParallel(System.Collections.Concurrent.Partitioner`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Concurrent.Partitioner`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsParallel(System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsParallel(System.Collections.IEnumerable)" attrib="150" static="true" returntype="System.Linq.ParallelQuery">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="AsSequential(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.IEnumerable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsUnordered(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Double]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Int32])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Int64])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Single]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cast(System.Linq.ParallelQuery)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Linq.ParallelQuery`1[TSource], TSource)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="value" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Linq.ParallelQuery`1[TSource], TSource, System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="value" position="1" attrib="0" type="TSource" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Linq.ParallelQuery`1[TSource], TSource)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="defaultValue" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAt(System.Linq.ParallelQuery`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAtOrDefault(System.Linq.ParallelQuery`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Empty()" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ForAll(System.Linq.ParallelQuery`1[TSource], System.Action`1[TSource])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="action" position="1" attrib="0" type="System.Action`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]" />
                  <parameter name="comparer" position="4" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.ParallelQuery`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.ParallelQuery`1[TOuter], System.Linq.ParallelQuery`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.ParallelQuery`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.ParallelQuery`1[TOuter], System.Linq.ParallelQuery`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.ParallelQuery`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.ParallelQuery`1[TOuter], System.Linq.ParallelQuery`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.ParallelQuery`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.ParallelQuery`1[TOuter], System.Linq.ParallelQuery`1[TInner], System.Func`2[TOuter,TKey], System.Func`2[TInner,TKey], System.Func`3[TOuter,TInner,TResult], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Func`2[TOuter,TKey]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Func`2[TInner,TKey]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Func`3[TOuter,TInner,TResult]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Double]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Single]" />
                </parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Double]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Single]" />
                </parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfType(System.Linq.ParallelQuery)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Range(System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[System.Int32]">
                <parameters>
                  <parameter name="start" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Repeat(TResult, System.Int32)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <parameters>
                  <parameter name="element" position="0" attrib="0" type="TResult" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reverse(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]], System.Func`3[TSource,TCollection,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TSource,TCollection,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]], System.Func`3[TSource,TCollection,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TSource,TCollection,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Skip(System.Linq.ParallelQuery`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Double]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[System.Single]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Decimal]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Double]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int32]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Int64]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Nullable`1[System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Func`2[TSource,System.Single]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Take(System.Linq.ParallelQuery`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.OrderedParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.OrderedParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.OrderedParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.OrderedParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.OrderedParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.OrderedParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.OrderedParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.OrderedParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.OrderedParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToArray(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="TSource[]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToDictionary(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Collections.Generic.Dictionary`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToList(System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Collections.Generic.List`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToLookup(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,TKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.ILookup`2[TKey,TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Func`2[TSource,TKey]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Func`2[TSource,TElement]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Linq.ParallelQuery`1[TSource], System.Func`2[TSource,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`2[TSource,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Linq.ParallelQuery`1[TSource], System.Func`3[TSource,System.Int32,System.Boolean])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Func`3[TSource,System.Int32,System.Boolean]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WithCancellation(System.Linq.ParallelQuery`1[TSource], System.Threading.CancellationToken)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="cancellationToken" position="1" attrib="0" type="System.Threading.CancellationToken" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WithDegreeOfParallelism(System.Linq.ParallelQuery`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="degreeOfParallelism" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WithExecutionMode(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelExecutionMode)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="executionMode" position="1" attrib="0" type="System.Linq.ParallelExecutionMode" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WithMergeOptions(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelMergeOptions)" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TSource]" />
                  <parameter name="mergeOptions" position="1" attrib="0" type="System.Linq.ParallelMergeOptions" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(System.Linq.ParallelQuery`1[TFirst], System.Collections.Generic.IEnumerable`1[TSecond], System.Func`3[TFirst,TSecond,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;." />
                    </properties>
                  </attribute>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TFirst]" />
                  <parameter name="second" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSecond]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TFirst,TSecond,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TFirst" attributes="0" />
                  <generic-parameter name="TSecond" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(System.Linq.ParallelQuery`1[TFirst], System.Linq.ParallelQuery`1[TSecond], System.Func`3[TFirst,TSecond,TResult])" attrib="150" static="true" returntype="System.Linq.ParallelQuery`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Linq.ParallelQuery`1[TFirst]" />
                  <parameter name="second" position="1" attrib="0" type="System.Linq.ParallelQuery`1[TSecond]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Func`3[TFirst,TSecond,TResult]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TFirst" attributes="0" />
                  <generic-parameter name="TSecond" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ParallelExecutionMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Default" attrib="32854" fieldtype="System.Linq.ParallelExecutionMode" value="0" />
              <field name="ForceParallelism" attrib="32854" fieldtype="System.Linq.ParallelExecutionMode" value="1" />
            </fields>
          </class>
          <class name="ParallelMergeOptions" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AutoBuffered" attrib="32854" fieldtype="System.Linq.ParallelMergeOptions" value="2" />
              <field name="Default" attrib="32854" fieldtype="System.Linq.ParallelMergeOptions" value="0" />
              <field name="FullyBuffered" attrib="32854" fieldtype="System.Linq.ParallelMergeOptions" value="3" />
              <field name="NotBuffered" attrib="32854" fieldtype="System.Linq.ParallelMergeOptions" value="1" />
            </fields>
          </class>
          <class name="ParallelQuery" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
          </class>
          <class name="ParallelQuery`1" type="class" base="System.Linq.ParallelQuery" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.IEnumerable`1[TSource]" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="TSource" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="GetEnumerator()" attrib="454" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[TSource]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="Queryable" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            </attributes>
            <methods>
              <method name="Aggregate(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,TSource,TSource]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="func" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,TSource,TSource]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.IQueryable`1[TSource], TAccumulate, System.Linq.Expressions.Expression`1[System.Func`3[TAccumulate,TSource,TAccumulate]])" attrib="150" static="true" returntype="TAccumulate">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TAccumulate,TSource,TAccumulate]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Aggregate(System.Linq.IQueryable`1[TSource], TAccumulate, System.Linq.Expressions.Expression`1[System.Func`3[TAccumulate,TSource,TAccumulate]], System.Linq.Expressions.Expression`1[System.Func`2[TAccumulate,TResult]])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="seed" position="1" attrib="0" type="TAccumulate" />
                  <parameter name="func" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TAccumulate,TSource,TAccumulate]]" />
                  <parameter name="selector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TAccumulate,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TAccumulate" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="All(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Any(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsQueryable(System.Collections.Generic.IEnumerable`1[TElement])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TElement]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[TElement]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AsQueryable(System.Collections.IEnumerable)" attrib="150" static="true" returntype="System.Linq.IQueryable">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Int32])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Int64])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Decimal]])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Double]])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int32]])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int64]])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Decimal]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Decimal]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Double]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Double]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int32]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int32]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int64]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int64]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Single]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Single]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Average(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Single]])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Cast(System.Linq.IQueryable)" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Concat(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Linq.IQueryable`1[TSource], TSource)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="item" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Contains(System.Linq.IQueryable`1[TSource], TSource, System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="item" position="1" attrib="0" type="TSource" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Count(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="DefaultIfEmpty(System.Linq.IQueryable`1[TSource], TSource)" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="defaultValue" position="1" attrib="0" type="TSource" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Distinct(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="comparer" position="1" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAt(System.Linq.IQueryable`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ElementAtOrDefault(System.Linq.IQueryable`1[TSource], System.Int32)" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Except(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="First(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="FirstOrDefault(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[System.Linq.IGrouping`2[TKey,TSource]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[System.Linq.IGrouping`2[TKey,TElement]]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]], System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TSource],TResult]]" />
                  <parameter name="comparer" position="3" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]], System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="elementSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TElement]]" />
                  <parameter name="resultSelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TKey,System.Collections.Generic.IEnumerable`1[TElement],TResult]]" />
                  <parameter name="comparer" position="4" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TElement" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.IQueryable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.IQueryable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GroupJoin(System.Linq.IQueryable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.IQueryable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TOuter,System.Collections.Generic.IEnumerable`1[TInner],TResult]]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Intersect(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.IQueryable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TOuter,TInner,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.IQueryable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TOuter,TInner,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Join(System.Linq.IQueryable`1[TOuter], System.Collections.Generic.IEnumerable`1[TInner], System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]], System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]], System.Linq.Expressions.Expression`1[System.Func`3[TOuter,TInner,TResult]], System.Collections.Generic.IEqualityComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="outer" position="0" attrib="0" type="System.Linq.IQueryable`1[TOuter]" />
                  <parameter name="inner" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TInner]" />
                  <parameter name="outerKeySelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TOuter,TKey]]" />
                  <parameter name="innerKeySelector" position="3" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TInner,TKey]]" />
                  <parameter name="resultSelector" position="4" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TOuter,TInner,TResult]]" />
                  <parameter name="comparer" position="5" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TOuter" attributes="0" />
                  <generic-parameter name="TInner" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Last(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LastOrDefault(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="LongCount(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Max(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Min(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]])" attrib="150" static="true" returntype="TResult">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OfType(System.Linq.IQueryable)" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderBy(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="OrderByDescending(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Reverse(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Select(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TResult]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TResult]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]]], System.Linq.Expressions.Expression`1[System.Func`3[TSource,TCollection,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Collections.Generic.IEnumerable`1[TCollection]]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,TCollection,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SelectMany(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]]], System.Linq.Expressions.Expression`1[System.Func`3[TSource,TCollection,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="collectionSelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Collections.Generic.IEnumerable`1[TCollection]]]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,TCollection,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TCollection" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SequenceEqual(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Single(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Linq.IQueryable`1[TSource])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SingleOrDefault(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="TSource">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Skip(System.Linq.IQueryable`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="SkipWhile(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Decimal])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Decimal]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Double])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Double]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Int32])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Int32]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Int64])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Int64]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Nullable`1[System.Decimal]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Decimal]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Nullable`1[System.Double]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Double]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Nullable`1[System.Int32]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Int32]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Nullable`1[System.Int64]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Int64]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Nullable`1[System.Single]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Nullable`1[System.Single]]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[System.Single])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[System.Single]" />
                </parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Decimal]])" attrib="150" static="true" returntype="System.Decimal">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Decimal]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Double]])" attrib="150" static="true" returntype="System.Double">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Double]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int32]])" attrib="150" static="true" returntype="System.Int32">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int32]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int64]])" attrib="150" static="true" returntype="System.Int64">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Int64]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Decimal]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Decimal]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Decimal]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Double]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Double]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Double]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int32]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int32]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int32]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int64]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Int64]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Int64]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Single]]])" attrib="150" static="true" returntype="System.Nullable`1[System.Single]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Nullable`1[System.Single]]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Sum(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Single]])" attrib="150" static="true" returntype="System.Single">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="selector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Single]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Take(System.Linq.IQueryable`1[TSource], System.Int32)" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TakeWhile(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.IOrderedQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenBy(System.Linq.IOrderedQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.IOrderedQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ThenByDescending(System.Linq.IOrderedQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]], System.Collections.Generic.IComparer`1[TKey])" attrib="150" static="true" returntype="System.Linq.IOrderedQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IOrderedQueryable`1[TSource]" />
                  <parameter name="keySelector" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,TKey]]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IComparer`1[TKey]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                  <generic-parameter name="TKey" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Union(System.Linq.IQueryable`1[TSource], System.Collections.Generic.IEnumerable`1[TSource], System.Collections.Generic.IEqualityComparer`1[TSource])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSource]" />
                  <parameter name="comparer" position="2" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[TSource]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`2[TSource,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Where(System.Linq.IQueryable`1[TSource], System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TSource]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source" position="0" attrib="0" type="System.Linq.IQueryable`1[TSource]" />
                  <parameter name="predicate" position="1" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TSource,System.Int32,System.Boolean]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TSource" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Zip(System.Linq.IQueryable`1[TFirst], System.Collections.Generic.IEnumerable`1[TSecond], System.Linq.Expressions.Expression`1[System.Func`3[TFirst,TSecond,TResult]])" attrib="150" static="true" returntype="System.Linq.IQueryable`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="source1" position="0" attrib="0" type="System.Linq.IQueryable`1[TFirst]" />
                  <parameter name="source2" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[TSecond]" />
                  <parameter name="resultSelector" position="2" attrib="0" type="System.Linq.Expressions.Expression`1[System.Func`3[TFirst,TSecond,TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TFirst" attributes="0" />
                  <generic-parameter name="TSecond" attributes="0" />
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Linq.Expressions">
        <classes>
          <class name="BinaryExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/BinaryExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="CanReduce" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReduce()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Conversion" attrib="0" ptype="System.Linq.Expressions.LambdaExpression">
                <methods>
                  <method name="get_Conversion()" attrib="2182" returntype="System.Linq.Expressions.LambdaExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLifted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLifted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLiftedToNull" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLiftedToNull()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Left" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Left()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Method()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Right" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Right()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Reduce()" attrib="198" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="conversion" position="1" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                  <parameter name="right" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BlockExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/BlockExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Expressions" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Expressions()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Variables" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                <methods>
                  <method name="get_Variables()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression], System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="expressions" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CatchBlock" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/CatchBlockProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Body" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Filter" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Test()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Variable" attrib="0" ptype="System.Linq.Expressions.ParameterExpression">
                <methods>
                  <method name="get_Variable()" attrib="2182" returntype="System.Linq.Expressions.ParameterExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Update(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="variable" position="0" attrib="0" type="System.Linq.Expressions.ParameterExpression" />
                  <parameter name="filter" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="body" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConditionalExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/ConditionalExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="IfFalse" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_IfFalse()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IfTrue" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_IfTrue()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Test()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.ConditionalExpression">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifTrue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifFalse" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConstantExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/ConstantExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DebugInfoExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/DebugInfoExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Document" attrib="0" ptype="System.Linq.Expressions.SymbolDocumentInfo">
                <methods>
                  <method name="get_Document()" attrib="2182" returntype="System.Linq.Expressions.SymbolDocumentInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EndColumn" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_EndColumn()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EndLine" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_EndLine()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsClear" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsClear()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StartColumn" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_StartColumn()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StartLine" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_StartLine()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DefaultExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/DefaultExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DynamicExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="System.Linq.Expressions.Expression/DynamicExpressionProxy" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
              <interface name="System.Linq.Expressions.IDynamicExpression" />
            </interfaces>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Binder" attrib="0" ptype="System.Runtime.CompilerServices.CallSiteBinder">
                <methods>
                  <method name="get_Binder()" attrib="2182" returntype="System.Runtime.CompilerServices.CallSiteBinder">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DelegateType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_DelegateType()" attrib="2534" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="5" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="5" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="arguments" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DynamicExpressionVisitor" type="class" base="System.Linq.Expressions.ExpressionVisitor" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="VisitDynamic(System.Linq.Expressions.DynamicExpression)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.DynamicExpression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ElementInit" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="AddMethod" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_AddMethod()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.ElementInit">
                <parameters>
                  <parameter name="arguments" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Expression" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Linq.Expressions.ExpressionType, System.Type)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="nodeType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CanReduce" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReduce()" attrib="2502" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2502" virtual="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2502" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="index" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ArrayLength(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberAssignment">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="expression" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberAssignment">
                <parameters>
                  <parameter name="propertyAccessor" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="expression" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Block(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="expressions" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Block(System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="expressions" position="0" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Block(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression], System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="expressions" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Block(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression], System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="expressions" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="arg0" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Block(System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="expressions" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Block(System.Type, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="expressions" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="arg0" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Block(System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression], System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="variables" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="expressions" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Block(System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression], System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="variables" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="expressions" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="arg0" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BlockExpression">
                <parameters>
                  <parameter name="arg0" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg4" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Break(System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Break(System.Linq.Expressions.LabelTarget, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="methodName" position="1" attrib="0" type="System.String" />
                  <parameter name="typeArguments" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="arguments" position="3" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="methodName" position="1" attrib="0" type="System.String" />
                  <parameter name="typeArguments" position="2" attrib="0" type="System.Type[]" />
                  <parameter name="arguments" position="3" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arg0" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg4" position="5" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="variable" position="0" attrib="0" type="System.Linq.Expressions.ParameterExpression" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Catch(System.Type, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="variable" position="0" attrib="0" type="System.Linq.Expressions.ParameterExpression" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="filter" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="filter" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.DebugInfoExpression">
                <parameters>
                  <parameter name="document" position="0" attrib="0" type="System.Linq.Expressions.SymbolDocumentInfo" />
                </parameters>
              </method>
              <method name="Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="conversion" position="2" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.ConditionalExpression">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifTrue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifFalse" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.ConditionalExpression">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifTrue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifFalse" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Constant(System.Object)" attrib="150" static="true" returntype="System.Linq.Expressions.ConstantExpression">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Constant(System.Object, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.ConstantExpression">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Continue(System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Continue(System.Linq.Expressions.LabelTarget, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Convert(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ConvertChecked(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Linq.Expressions.DebugInfoExpression">
                <parameters>
                  <parameter name="document" position="0" attrib="0" type="System.Linq.Expressions.SymbolDocumentInfo" />
                  <parameter name="startLine" position="1" attrib="0" type="System.Int32" />
                  <parameter name="startColumn" position="2" attrib="0" type="System.Int32" />
                  <parameter name="endLine" position="3" attrib="0" type="System.Int32" />
                  <parameter name="endColumn" position="4" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Decrement(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Default(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.DefaultExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="returnType" position="1" attrib="0" type="System.Type" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="5" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.ElementInit">
                <parameters>
                  <parameter name="addMethod" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.ElementInit">
                <parameters>
                  <parameter name="addMethod" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Empty()" attrib="150" static="true" returntype="System.Linq.Expressions.DefaultExpression">
                <parameters />
              </method>
              <method name="Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="field" position="1" attrib="0" type="System.Reflection.FieldInfo" />
                </parameters>
              </method>
              <method name="Field(System.Linq.Expressions.Expression, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="fieldName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Field(System.Linq.Expressions.Expression, System.Type, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="fieldName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetActionType(System.Type[])" attrib="150" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeArgs" position="0" attrib="0" type="System.Type[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetDelegateType(System.Type[])" attrib="150" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeArgs" position="0" attrib="0" type="System.Type[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="GetFuncType(System.Type[])" attrib="150" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="typeArgs" position="0" attrib="0" type="System.Type[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Goto(System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Goto(System.Linq.Expressions.LabelTarget, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.ConditionalExpression">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifTrue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.ConditionalExpression">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifTrue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="ifFalse" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Increment(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.InvocationExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.InvocationExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsFalse(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="IsTrue(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Label()" attrib="150" static="true" returntype="System.Linq.Expressions.LabelTarget">
                <parameters />
              </method>
              <method name="Label(System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.LabelExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Label(System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.LabelTarget">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Label(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.LabelTarget">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.LabelExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Label(System.Type, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.LabelTarget">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="1" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="2" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="tailCall" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="3" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TDelegate" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                  <parameter name="tailCall" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="3" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="3" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="tailCall" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="3" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="parameters" position="3" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.LambdaExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="name" position="2" attrib="0" type="System.String" />
                  <parameter name="tailCall" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="parameters" position="4" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit]" />
                </parameters>
              </method>
              <method name="ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Linq.Expressions.ElementInit[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="propertyAccessor" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit]" />
                </parameters>
              </method>
              <method name="ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="propertyAccessor" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Linq.Expressions.ElementInit[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit]" />
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Linq.Expressions.ElementInit[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="addMethod" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="initializers" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="addMethod" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="initializers" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Loop(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.LoopExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.LoopExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="break" position="1" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.LoopExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="break" position="1" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="continue" position="2" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="binaryType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="left" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="binaryType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="left" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="4" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="binaryType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="left" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="4" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="5" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="variable" position="1" attrib="0" type="System.Linq.Expressions.ParameterExpression" />
                  <parameter name="body" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="filter" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.DynamicExpression">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="arg0" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg1" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg2" position="4" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arg3" position="5" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="kind" position="0" attrib="0" type="System.Linq.Expressions.GotoExpressionKind" />
                  <parameter name="target" position="1" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="3" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexer" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="member" position="1" attrib="0" type="System.Reflection.MemberInfo" />
                </parameters>
              </method>
              <method name="MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.CatchBlock])" attrib="150" static="true" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="finally" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="fault" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="handlers" position="4" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.CatchBlock]" />
                </parameters>
              </method>
              <method name="MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="unaryType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="operand" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="unaryType" position="0" attrib="0" type="System.Linq.Expressions.ExpressionType" />
                  <parameter name="operand" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding]" />
                </parameters>
              </method>
              <method name="MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Linq.Expressions.MemberBinding[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="propertyAccessor" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding]" />
                </parameters>
              </method>
              <method name="MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="propertyAccessor" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Linq.Expressions.MemberBinding[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding]" />
                </parameters>
              </method>
              <method name="MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])" attrib="150" static="true" returntype="System.Linq.Expressions.MemberInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Linq.Expressions.MemberBinding[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Negate(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="NegateChecked(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="New(System.Reflection.ConstructorInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="constructor" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                </parameters>
              </method>
              <method name="New(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="constructor" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="constructor" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression], System.Collections.Generic.IEnumerable`1[System.Reflection.MemberInfo])" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="constructor" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                  <parameter name="members" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Reflection.MemberInfo]" />
                </parameters>
              </method>
              <method name="New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression], System.Reflection.MemberInfo[])" attrib="150" static="true" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="constructor" position="0" attrib="0" type="System.Reflection.ConstructorInfo" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                  <parameter name="members" position="2" attrib="0" type="System.Reflection.MemberInfo[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.NewArrayExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="bounds" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.NewArrayExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="bounds" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="NewArrayInit(System.Type, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.NewArrayExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="NewArrayInit(System.Type, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.NewArrayExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Not(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="liftToNull" position="2" attrib="0" type="System.Boolean" />
                  <parameter name="method" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="OnesComplement(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Parameter(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.ParameterExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Parameter(System.Type, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.ParameterExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="PostDecrementAssign(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="PostIncrementAssign(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="PreDecrementAssign(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="PreIncrementAssign(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="propertyAccessor" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="property" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="propertyName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexer" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="indexer" position="1" attrib="0" type="System.Reflection.PropertyInfo" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="propertyName" position="1" attrib="0" type="System.String" />
                  <parameter name="arguments" position="2" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Property(System.Linq.Expressions.Expression, System.Type, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                  <parameter name="propertyName" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="PropertyOrField(System.Linq.Expressions.Expression, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="propertyOrFieldName" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Quote(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Reduce()" attrib="454" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="ReduceAndCheck()" attrib="134" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="ReduceExtensions()" attrib="134" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Rethrow()" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters />
              </method>
              <method name="Rethrow(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Return(System.Linq.Expressions.LabelTarget)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Return(System.Linq.Expressions.LabelTarget, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="2" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="RuntimeVariables(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="150" static="true" returntype="System.Linq.Expressions.RuntimeVariablesExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
              <method name="RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" attrib="150" static="true" returntype="System.Linq.Expressions.RuntimeVariablesExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Linq.Expressions.ParameterExpression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="conversion" position="3" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                </parameters>
              </method>
              <method name="SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.BinaryExpression">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="right" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="switchValue" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="cases" position="1" attrib="0" type="System.Linq.Expressions.SwitchCase[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="switchValue" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="defaultBody" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="cases" position="2" attrib="0" type="System.Linq.Expressions.SwitchCase[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="switchValue" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="defaultBody" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="comparison" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="cases" position="3" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase]" />
                </parameters>
              </method>
              <method name="Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="switchValue" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="defaultBody" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="comparison" position="2" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="cases" position="3" attrib="0" type="System.Linq.Expressions.SwitchCase[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="switchValue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="defaultBody" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="comparison" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="cases" position="4" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase]" />
                </parameters>
              </method>
              <method name="Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="switchValue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="defaultBody" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="comparison" position="3" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="cases" position="4" attrib="0" type="System.Linq.Expressions.SwitchCase[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchCase">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="testValues" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])" attrib="150" static="true" returntype="System.Linq.Expressions.SwitchCase">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="testValues" position="1" attrib="0" type="System.Linq.Expressions.Expression[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="SymbolDocument(System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.SymbolDocumentInfo">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SymbolDocument(System.String, System.Guid)" attrib="150" static="true" returntype="System.Linq.Expressions.SymbolDocumentInfo">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="language" position="1" attrib="0" type="System.Guid" />
                </parameters>
              </method>
              <method name="SymbolDocument(System.String, System.Guid, System.Guid)" attrib="150" static="true" returntype="System.Linq.Expressions.SymbolDocumentInfo">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="language" position="1" attrib="0" type="System.Guid" />
                  <parameter name="languageVendor" position="2" attrib="0" type="System.Guid" />
                </parameters>
              </method>
              <method name="SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)" attrib="150" static="true" returntype="System.Linq.Expressions.SymbolDocumentInfo">
                <parameters>
                  <parameter name="fileName" position="0" attrib="0" type="System.String" />
                  <parameter name="language" position="1" attrib="0" type="System.Guid" />
                  <parameter name="languageVendor" position="2" attrib="0" type="System.Guid" />
                  <parameter name="documentType" position="3" attrib="0" type="System.Guid" />
                </parameters>
              </method>
              <method name="Throw(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Throw(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])" attrib="150" static="true" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="handlers" position="1" attrib="0" type="System.Linq.Expressions.CatchBlock[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])" attrib="150" static="true" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="finally" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="handlers" position="2" attrib="0" type="System.Linq.Expressions.CatchBlock[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="fault" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="finally" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="TryGetActionType(System.Type[], out System.Type&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typeArgs" position="0" attrib="0" type="System.Type[]" />
                  <parameter name="actionType" position="1" attrib="2" type="System.Type&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TryGetFuncType(System.Type[], out System.Type&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="typeArgs" position="0" attrib="0" type="System.Type[]" />
                  <parameter name="funcType" position="1" attrib="2" type="System.Type&amp;" direction="out" />
                </parameters>
              </method>
              <method name="TypeAs(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="TypeEqual(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.TypeBinaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="TypeIs(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.TypeBinaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="UnaryPlus(System.Linq.Expressions.Expression)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="method" position="1" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="Unbox(System.Linq.Expressions.Expression, System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="type" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Variable(System.Type)" attrib="150" static="true" returntype="System.Linq.Expressions.ParameterExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Variable(System.Type, System.String)" attrib="150" static="true" returntype="System.Linq.Expressions.ParameterExpression">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="VisitChildren(System.Linq.Expressions.ExpressionVisitor)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExpressionType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Add" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="0" />
              <field name="AddAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="63" />
              <field name="AddAssignChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="74" />
              <field name="AddChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="1" />
              <field name="And" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="2" />
              <field name="AndAlso" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="3" />
              <field name="AndAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="64" />
              <field name="ArrayIndex" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="5" />
              <field name="ArrayLength" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="4" />
              <field name="Assign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="46" />
              <field name="Block" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="47" />
              <field name="Call" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="6" />
              <field name="Coalesce" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="7" />
              <field name="Conditional" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="8" />
              <field name="Constant" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="9" />
              <field name="Convert" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="10" />
              <field name="ConvertChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="11" />
              <field name="DebugInfo" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="48" />
              <field name="Decrement" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="49" />
              <field name="Default" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="51" />
              <field name="Divide" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="12" />
              <field name="DivideAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="65" />
              <field name="Dynamic" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="50" />
              <field name="Equal" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="13" />
              <field name="ExclusiveOr" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="14" />
              <field name="ExclusiveOrAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="66" />
              <field name="Extension" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="52" />
              <field name="Goto" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="53" />
              <field name="GreaterThan" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="15" />
              <field name="GreaterThanOrEqual" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="16" />
              <field name="Increment" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="54" />
              <field name="Index" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="55" />
              <field name="Invoke" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="17" />
              <field name="IsFalse" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="84" />
              <field name="IsTrue" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="83" />
              <field name="Label" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="56" />
              <field name="Lambda" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="18" />
              <field name="LeftShift" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="19" />
              <field name="LeftShiftAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="67" />
              <field name="LessThan" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="20" />
              <field name="LessThanOrEqual" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="21" />
              <field name="ListInit" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="22" />
              <field name="Loop" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="58" />
              <field name="MemberAccess" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="23" />
              <field name="MemberInit" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="24" />
              <field name="Modulo" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="25" />
              <field name="ModuloAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="68" />
              <field name="Multiply" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="26" />
              <field name="MultiplyAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="69" />
              <field name="MultiplyAssignChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="75" />
              <field name="MultiplyChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="27" />
              <field name="Negate" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="28" />
              <field name="NegateChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="30" />
              <field name="New" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="31" />
              <field name="NewArrayBounds" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="33" />
              <field name="NewArrayInit" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="32" />
              <field name="Not" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="34" />
              <field name="NotEqual" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="35" />
              <field name="OnesComplement" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="82" />
              <field name="Or" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="36" />
              <field name="OrAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="70" />
              <field name="OrElse" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="37" />
              <field name="Parameter" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="38" />
              <field name="PostDecrementAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="80" />
              <field name="PostIncrementAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="79" />
              <field name="Power" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="39" />
              <field name="PowerAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="71" />
              <field name="PreDecrementAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="78" />
              <field name="PreIncrementAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="77" />
              <field name="Quote" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="40" />
              <field name="RightShift" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="41" />
              <field name="RightShiftAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="72" />
              <field name="RuntimeVariables" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="57" />
              <field name="Subtract" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="42" />
              <field name="SubtractAssign" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="73" />
              <field name="SubtractAssignChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="76" />
              <field name="SubtractChecked" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="43" />
              <field name="Switch" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="59" />
              <field name="Throw" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="60" />
              <field name="Try" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="61" />
              <field name="TypeAs" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="44" />
              <field name="TypeEqual" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="81" />
              <field name="TypeIs" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="45" />
              <field name="UnaryPlus" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="29" />
              <field name="Unbox" attrib="32854" fieldtype="System.Linq.Expressions.ExpressionType" value="62" />
            </fields>
          </class>
          <class name="ExpressionVisitor" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Visit(System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <parameters>
                  <parameter name="nodes" position="0" attrib="0" type="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
              <method name="Visit(System.Linq.Expressions.Expression)" attrib="454" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="Visit(System.Collections.ObjectModel.ReadOnlyCollection`1[T], System.Func`2[T,T])" attrib="150" static="true" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[T]">
                <parameters>
                  <parameter name="nodes" position="0" attrib="0" type="System.Collections.ObjectModel.ReadOnlyCollection`1[T]" />
                  <parameter name="elementVisitor" position="1" attrib="0" type="System.Func`2[T,T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="VisitAndConvert(System.Collections.ObjectModel.ReadOnlyCollection`1[T], System.String)" attrib="134" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[T]">
                <parameters>
                  <parameter name="nodes" position="0" attrib="0" type="System.Collections.ObjectModel.ReadOnlyCollection`1[T]" />
                  <parameter name="callerName" position="1" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Linq.Expressions.Expression" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="VisitAndConvert(T, System.String)" attrib="134" returntype="T">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="T" />
                  <parameter name="callerName" position="1" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Linq.Expressions.Expression" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="VisitBinary(System.Linq.Expressions.BinaryExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.BinaryExpression" />
                </parameters>
              </method>
              <method name="VisitBlock(System.Linq.Expressions.BlockExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.BlockExpression" />
                </parameters>
              </method>
              <method name="VisitCatchBlock(System.Linq.Expressions.CatchBlock)" attrib="452" virtual="true" returntype="System.Linq.Expressions.CatchBlock">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.CatchBlock" />
                </parameters>
              </method>
              <method name="VisitConditional(System.Linq.Expressions.ConditionalExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.ConditionalExpression" />
                </parameters>
              </method>
              <method name="VisitConstant(System.Linq.Expressions.ConstantExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.ConstantExpression" />
                </parameters>
              </method>
              <method name="VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.DebugInfoExpression" />
                </parameters>
              </method>
              <method name="VisitDefault(System.Linq.Expressions.DefaultExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.DefaultExpression" />
                </parameters>
              </method>
              <method name="VisitDynamic(System.Linq.Expressions.DynamicExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.DynamicExpression" />
                </parameters>
              </method>
              <method name="VisitElementInit(System.Linq.Expressions.ElementInit)" attrib="452" virtual="true" returntype="System.Linq.Expressions.ElementInit">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.ElementInit" />
                </parameters>
              </method>
              <method name="VisitExtension(System.Linq.Expressions.Expression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
              <method name="VisitGoto(System.Linq.Expressions.GotoExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.GotoExpression" />
                </parameters>
              </method>
              <method name="VisitIndex(System.Linq.Expressions.IndexExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.IndexExpression" />
                </parameters>
              </method>
              <method name="VisitInvocation(System.Linq.Expressions.InvocationExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.InvocationExpression" />
                </parameters>
              </method>
              <method name="VisitLabel(System.Linq.Expressions.LabelExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.LabelExpression" />
                </parameters>
              </method>
              <method name="VisitLabelTarget(System.Linq.Expressions.LabelTarget)" attrib="452" virtual="true" returntype="System.Linq.Expressions.LabelTarget">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="VisitLambda(System.Linq.Expressions.Expression`1[T])" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.Expression`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="VisitListInit(System.Linq.Expressions.ListInitExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.ListInitExpression" />
                </parameters>
              </method>
              <method name="VisitLoop(System.Linq.Expressions.LoopExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.LoopExpression" />
                </parameters>
              </method>
              <method name="VisitMember(System.Linq.Expressions.MemberExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberExpression" />
                </parameters>
              </method>
              <method name="VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)" attrib="452" virtual="true" returntype="System.Linq.Expressions.MemberAssignment">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberAssignment" />
                </parameters>
              </method>
              <method name="VisitMemberBinding(System.Linq.Expressions.MemberBinding)" attrib="452" virtual="true" returntype="System.Linq.Expressions.MemberBinding">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberBinding" />
                </parameters>
              </method>
              <method name="VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberInitExpression" />
                </parameters>
              </method>
              <method name="VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)" attrib="452" virtual="true" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberListBinding" />
                </parameters>
              </method>
              <method name="VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)" attrib="452" virtual="true" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MemberMemberBinding" />
                </parameters>
              </method>
              <method name="VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.MethodCallExpression" />
                </parameters>
              </method>
              <method name="VisitNew(System.Linq.Expressions.NewExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                </parameters>
              </method>
              <method name="VisitNewArray(System.Linq.Expressions.NewArrayExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.NewArrayExpression" />
                </parameters>
              </method>
              <method name="VisitParameter(System.Linq.Expressions.ParameterExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.ParameterExpression" />
                </parameters>
              </method>
              <method name="VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.RuntimeVariablesExpression" />
                </parameters>
              </method>
              <method name="VisitSwitch(System.Linq.Expressions.SwitchExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.SwitchExpression" />
                </parameters>
              </method>
              <method name="VisitSwitchCase(System.Linq.Expressions.SwitchCase)" attrib="452" virtual="true" returntype="System.Linq.Expressions.SwitchCase">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.SwitchCase" />
                </parameters>
              </method>
              <method name="VisitTry(System.Linq.Expressions.TryExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.TryExpression" />
                </parameters>
              </method>
              <method name="VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.TypeBinaryExpression" />
                </parameters>
              </method>
              <method name="VisitUnary(System.Linq.Expressions.UnaryExpression)" attrib="453" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="node" position="0" attrib="0" type="System.Linq.Expressions.UnaryExpression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Expression`1" type="class" base="System.Linq.Expressions.LambdaExpression" sealed="true" charset="Ansi" layout="Auto">
            <generic-parameters>
              <generic-parameter name="TDelegate" attributes="0" />
            </generic-parameters>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Compile()" attrib="134" returntype="TDelegate">
                <parameters />
              </method>
              <method name="Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" attrib="134" returntype="TDelegate">
                <parameters>
                  <parameter name="debugInfoGenerator" position="0" attrib="0" type="System.Runtime.CompilerServices.DebugInfoGenerator" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="134" returntype="System.Linq.Expressions.Expression`1[TDelegate]">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GotoExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Kind" attrib="0" ptype="System.Linq.Expressions.GotoExpressionKind">
                <methods>
                  <method name="get_Kind()" attrib="2182" returntype="System.Linq.Expressions.GotoExpressionKind">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Target" attrib="0" ptype="System.Linq.Expressions.LabelTarget">
                <methods>
                  <method name="get_Target()" attrib="2182" returntype="System.Linq.Expressions.LabelTarget">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.GotoExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="value" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GotoExpressionKind" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Break" attrib="32854" fieldtype="System.Linq.Expressions.GotoExpressionKind" value="2" />
              <field name="Continue" attrib="32854" fieldtype="System.Linq.Expressions.GotoExpressionKind" value="3" />
              <field name="Goto" attrib="32854" fieldtype="System.Linq.Expressions.GotoExpressionKind" value="0" />
              <field name="Return" attrib="32854" fieldtype="System.Linq.Expressions.GotoExpressionKind" value="1" />
            </fields>
          </class>
          <class name="IArgumentProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="ArgumentCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ArgumentCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetArgument(System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDynamicExpression" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="DelegateType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_DelegateType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateCallSite()" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters />
              </method>
              <method name="Rewrite(System.Linq.Expressions.Expression[])" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Linq.Expressions.Expression[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IndexExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Indexer" attrib="0" ptype="System.Reflection.PropertyInfo">
                <methods>
                  <method name="get_Indexer()" attrib="2182" returntype="System.Reflection.PropertyInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Object" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Object()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.IndexExpression">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="InvocationExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.InvocationExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LabelExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="DefaultValue" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_DefaultValue()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Target" attrib="0" ptype="System.Linq.Expressions.LabelTarget">
                <methods>
                  <method name="get_Target()" attrib="2182" returntype="System.Linq.Expressions.LabelTarget">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.LabelExpression">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LabelTarget" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="LambdaExpression" type="class" base="System.Linq.Expressions.Expression" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Body" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Parameters" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                <methods>
                  <method name="get_Parameters()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ReturnType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ReturnType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TailCall" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TailCall()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Compile()" attrib="134" returntype="System.Delegate">
                <parameters />
              </method>
              <method name="Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" attrib="134" returntype="System.Delegate">
                <parameters>
                  <parameter name="debugInfoGenerator" position="0" attrib="0" type="System.Runtime.CompilerServices.DebugInfoGenerator" />
                </parameters>
              </method>
              <method name="CompileToMethod(System.Reflection.Emit.MethodBuilder)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.Emit.MethodBuilder" />
                </parameters>
              </method>
              <method name="CompileToMethod(System.Reflection.Emit.MethodBuilder, System.Runtime.CompilerServices.DebugInfoGenerator)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.Emit.MethodBuilder" />
                  <parameter name="debugInfoGenerator" position="1" attrib="0" type="System.Runtime.CompilerServices.DebugInfoGenerator" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ListInitExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="CanReduce" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReduce()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Initializers" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ElementInit]">
                <methods>
                  <method name="get_Initializers()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ElementInit]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewExpression" attrib="0" ptype="System.Linq.Expressions.NewExpression">
                <methods>
                  <method name="get_NewExpression()" attrib="2182" returntype="System.Linq.Expressions.NewExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Reduce()" attrib="198" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="Update(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit])" attrib="134" returntype="System.Linq.Expressions.ListInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="initializers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LoopExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Body" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BreakLabel" attrib="0" ptype="System.Linq.Expressions.LabelTarget">
                <methods>
                  <method name="get_BreakLabel()" attrib="2182" returntype="System.Linq.Expressions.LabelTarget">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ContinueLabel" attrib="0" ptype="System.Linq.Expressions.LabelTarget">
                <methods>
                  <method name="get_ContinueLabel()" attrib="2182" returntype="System.Linq.Expressions.LabelTarget">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.LoopExpression">
                <parameters>
                  <parameter name="breakLabel" position="0" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="continueLabel" position="1" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                  <parameter name="body" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberAssignment" type="class" base="System.Linq.Expressions.MemberBinding" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Update(System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.MemberAssignment">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberBinding" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Linq.Expressions.MemberBindingType, System.Reflection.MemberInfo)" attrib="6276">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Do not use this constructor. It will be removed in future releases." />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Linq.Expressions.MemberBindingType" />
                  <parameter name="member" position="1" attrib="0" type="System.Reflection.MemberInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BindingType" attrib="0" ptype="System.Linq.Expressions.MemberBindingType">
                <methods>
                  <method name="get_BindingType()" attrib="2182" returntype="System.Linq.Expressions.MemberBindingType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Member" attrib="0" ptype="System.Reflection.MemberInfo">
                <methods>
                  <method name="get_Member()" attrib="2182" returntype="System.Reflection.MemberInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="MemberBindingType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Assignment" attrib="32854" fieldtype="System.Linq.Expressions.MemberBindingType" value="0" />
              <field name="ListBinding" attrib="32854" fieldtype="System.Linq.Expressions.MemberBindingType" value="2" />
              <field name="MemberBinding" attrib="32854" fieldtype="System.Linq.Expressions.MemberBindingType" value="1" />
            </fields>
          </class>
          <class name="MemberExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Member" attrib="0" ptype="System.Reflection.MemberInfo">
                <methods>
                  <method name="get_Member()" attrib="2182" returntype="System.Reflection.MemberInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.MemberExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberInitExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Bindings" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.MemberBinding]">
                <methods>
                  <method name="get_Bindings()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.MemberBinding]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CanReduce" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReduce()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NewExpression" attrib="0" ptype="System.Linq.Expressions.NewExpression">
                <methods>
                  <method name="get_NewExpression()" attrib="2182" returntype="System.Linq.Expressions.NewExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Reduce()" attrib="198" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="Update(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding])" attrib="134" returntype="System.Linq.Expressions.MemberInitExpression">
                <parameters>
                  <parameter name="newExpression" position="0" attrib="0" type="System.Linq.Expressions.NewExpression" />
                  <parameter name="bindings" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberListBinding" type="class" base="System.Linq.Expressions.MemberBinding" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Initializers" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ElementInit]">
                <methods>
                  <method name="get_Initializers()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ElementInit]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit])" attrib="134" returntype="System.Linq.Expressions.MemberListBinding">
                <parameters>
                  <parameter name="initializers" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ElementInit]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MemberMemberBinding" type="class" base="System.Linq.Expressions.MemberBinding" sealed="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Bindings" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.MemberBinding]">
                <methods>
                  <method name="get_Bindings()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.MemberBinding]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding])" attrib="134" returntype="System.Linq.Expressions.MemberMemberBinding">
                <parameters>
                  <parameter name="bindings" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.MemberBinding]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MethodCallExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Method()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Object" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Object()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.MethodCallExpression">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NewArrayExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Expressions" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Expressions()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.NewArrayExpression">
                <parameters>
                  <parameter name="expressions" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NewExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Linq.Expressions.IArgumentProvider" />
            </interfaces>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Constructor" attrib="0" ptype="System.Reflection.ConstructorInfo">
                <methods>
                  <method name="get_Constructor()" attrib="2182" returntype="System.Reflection.ConstructorInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Members" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Reflection.MemberInfo]">
                <methods>
                  <method name="get_Members()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Reflection.MemberInfo]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression])" attrib="134" returntype="System.Linq.Expressions.NewExpression">
                <parameters>
                  <parameter name="arguments" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ParameterExpression" type="class" base="System.Linq.Expressions.Expression" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="IsByRef" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsByRef()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2246" virtual="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RuntimeVariablesExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Variables" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                <methods>
                  <method name="get_Variables()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression])" attrib="134" returntype="System.Linq.Expressions.RuntimeVariablesExpression">
                <parameters>
                  <parameter name="variables" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.ParameterExpression]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SwitchCase" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Body" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestValues" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                <methods>
                  <method name="get_TestValues()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.Expression]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Update(System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression], System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.SwitchCase">
                <parameters>
                  <parameter name="testValues" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.Expression]" />
                  <parameter name="body" position="1" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SwitchExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Cases" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.SwitchCase]">
                <methods>
                  <method name="get_Cases()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.SwitchCase]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Comparison" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Comparison()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DefaultBody" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_DefaultBody()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SwitchValue" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_SwitchValue()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase], System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.SwitchExpression">
                <parameters>
                  <parameter name="switchValue" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="cases" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.SwitchCase]" />
                  <parameter name="defaultBody" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SymbolDocumentInfo" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="DocumentType" attrib="0" ptype="System.Guid">
                <methods>
                  <method name="get_DocumentType()" attrib="2502" virtual="true" returntype="System.Guid">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FileName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FileName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Language" attrib="0" ptype="System.Guid">
                <methods>
                  <method name="get_Language()" attrib="2502" virtual="true" returntype="System.Guid">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LanguageVendor" attrib="0" ptype="System.Guid">
                <methods>
                  <method name="get_LanguageVendor()" attrib="2502" virtual="true" returntype="System.Guid">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TryExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Body" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Body()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Fault" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Fault()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Finally" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Finally()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Handlers" attrib="0" ptype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.CatchBlock]">
                <methods>
                  <method name="get_Handlers()" attrib="2182" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.CatchBlock]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.CatchBlock], System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.TryExpression">
                <parameters>
                  <parameter name="body" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="handlers" position="1" attrib="0" type="System.Collections.Generic.IEnumerable`1[System.Linq.Expressions.CatchBlock]" />
                  <parameter name="finally" position="2" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="fault" position="3" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeBinaryExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Expression" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Expression()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TypeOperand" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_TypeOperand()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Update(System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.TypeBinaryExpression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UnaryExpression" type="class" base="System.Linq.Expressions.Expression" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Diagnostics.DebuggerTypeProxyAttribute">
                <properties>
                  <property name="ProxyTypeName" value="null" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="CanReduce" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CanReduce()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLifted" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLifted()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsLiftedToNull" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsLiftedToNull()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Method()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NodeType" attrib="0" ptype="System.Linq.Expressions.ExpressionType">
                <methods>
                  <method name="get_NodeType()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Linq.Expressions.ExpressionType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Operand" attrib="0" ptype="System.Linq.Expressions.Expression">
                <methods>
                  <method name="get_Operand()" attrib="2182" returntype="System.Linq.Expressions.Expression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_Type()" attrib="2278" virtual="true" sealed="true" is-override="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Accept(System.Linq.Expressions.ExpressionVisitor)" attrib="197" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="visitor" position="0" attrib="0" type="System.Linq.Expressions.ExpressionVisitor" />
                </parameters>
              </method>
              <method name="Reduce()" attrib="198" virtual="true" is-override="true" returntype="System.Linq.Expressions.Expression">
                <parameters />
              </method>
              <method name="Update(System.Linq.Expressions.Expression)" attrib="134" returntype="System.Linq.Expressions.UnaryExpression">
                <parameters>
                  <parameter name="operand" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Runtime.CompilerServices">
        <classes>
          <class name="CallSite" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <properties>
              <property name="Binder" attrib="0" ptype="System.Runtime.CompilerServices.CallSiteBinder">
                <methods>
                  <method name="get_Binder()" attrib="2182" returntype="System.Runtime.CompilerServices.CallSiteBinder">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Create(System.Type, System.Runtime.CompilerServices.CallSiteBinder)" attrib="150" static="true" returntype="System.Runtime.CompilerServices.CallSite">
                <parameters>
                  <parameter name="delegateType" position="0" attrib="0" type="System.Type" />
                  <parameter name="binder" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CallSiteBinder" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="UpdateLabel" attrib="0" ptype="System.Linq.Expressions.LabelTarget">
                <methods>
                  <method name="get_UpdateLabel()" attrib="2198" static="true" returntype="System.Linq.Expressions.LabelTarget">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Bind(System.Object[], System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression], System.Linq.Expressions.LabelTarget)" attrib="1478" abstract="true" virtual="true" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Collections.ObjectModel.ReadOnlyCollection`1[System.Linq.Expressions.ParameterExpression]" />
                  <parameter name="returnLabel" position="2" attrib="0" type="System.Linq.Expressions.LabelTarget" />
                </parameters>
              </method>
              <method name="BindDelegate(System.Runtime.CompilerServices.CallSite`1[T], System.Object[])" attrib="454" virtual="true" returntype="T">
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="CacheTarget(T)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="CallSiteHelpers" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="IsInternalFrame(System.Reflection.MethodBase)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="mb" position="0" attrib="0" type="System.Reflection.MethodBase" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CallSiteOps" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerStepThroughAttribute" />
            </attributes>
            <methods>
              <method name="AddRule(System.Runtime.CompilerServices.CallSite`1[T], T)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                  <parameter name="rule" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="Bind(System.Runtime.CompilerServices.CallSiteBinder, System.Runtime.CompilerServices.CallSite`1[T], System.Object[])" attrib="150" static="true" returntype="T">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                  <parameter name="site" position="1" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="ClearMatch(System.Runtime.CompilerServices.CallSite)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite" />
                </parameters>
              </method>
              <method name="CreateMatchmaker(System.Runtime.CompilerServices.CallSite`1[T])" attrib="150" static="true" returntype="System.Runtime.CompilerServices.CallSite`1[T]">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="GetCachedRules(System.Runtime.CompilerServices.RuleCache`1[T])" attrib="150" static="true" returntype="T[]">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="cache" position="0" attrib="0" type="System.Runtime.CompilerServices.RuleCache`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="GetMatch(System.Runtime.CompilerServices.CallSite)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite" />
                </parameters>
              </method>
              <method name="GetRuleCache(System.Runtime.CompilerServices.CallSite`1[T])" attrib="150" static="true" returntype="System.Runtime.CompilerServices.RuleCache`1[T]">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="GetRules(System.Runtime.CompilerServices.CallSite`1[T])" attrib="150" static="true" returntype="T[]">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="MoveRule(System.Runtime.CompilerServices.RuleCache`1[T], T, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="cache" position="0" attrib="0" type="System.Runtime.CompilerServices.RuleCache`1[T]" />
                  <parameter name="rule" position="1" attrib="0" type="T" />
                  <parameter name="i" position="2" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
              <method name="SetNotMatched(System.Runtime.CompilerServices.CallSite)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="site" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite" />
                </parameters>
              </method>
              <method name="UpdateRules(System.Runtime.CompilerServices.CallSite`1[T], System.Int32)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="this" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSite`1[T]" />
                  <parameter name="matched" position="1" attrib="0" type="System.Int32" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="4" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="CallSite`1" type="class" base="System.Runtime.CompilerServices.CallSite" charset="Ansi" layout="Auto">
            <generic-parameters>
              <generic-parameter name="T" attributes="4" />
            </generic-parameters>
            <fields>
              <field name="Target" attrib="6" fieldtype="T" />
            </fields>
            <properties>
              <property name="Update" attrib="0" ptype="T">
                <methods>
                  <method name="get_Update()" attrib="2182" returntype="T">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Create(System.Runtime.CompilerServices.CallSiteBinder)" attrib="150" static="true" returntype="System.Runtime.CompilerServices.CallSite`1[T]">
                <parameters>
                  <parameter name="binder" position="0" attrib="0" type="System.Runtime.CompilerServices.CallSiteBinder" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Closure" type="class" base="System.Object" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerStepThroughAttribute" />
            </attributes>
            <fields>
              <field name="Constants" attrib="38" fieldtype="System.Object[]" />
              <field name="Locals" attrib="38" fieldtype="System.Object[]" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Object[], System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="constants" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="locals" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="DebugInfoGenerator" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="MarkSequencePoint(System.Linq.Expressions.LambdaExpression, System.Int32, System.Linq.Expressions.DebugInfoExpression)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Linq.Expressions.LambdaExpression" />
                  <parameter name="ilOffset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="sequencePoint" position="2" attrib="0" type="System.Linq.Expressions.DebugInfoExpression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DynamicAttribute" type="class" base="System.Attribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="ValidOn" value="ReturnValue, Parameter, Field, Property, Struct, Class" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Boolean[])" attrib="6278">
                <parameters>
                  <parameter name="transformFlags" position="0" attrib="0" type="System.Boolean[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="TransformFlags" attrib="0" ptype="System.Collections.Generic.IList`1[System.Boolean]">
                <methods>
                  <method name="get_TransformFlags()" attrib="2182" returntype="System.Collections.Generic.IList`1[System.Boolean]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ExecutionScope" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ObsoleteAttribute">
                <properties>
                  <property name="Message" value="do not use this type" />
                  <property name="IsError" value="True" />
                </properties>
              </attribute>
            </attributes>
            <fields>
              <field name="Globals" attrib="6" fieldtype="System.Object[]" />
              <field name="Locals" attrib="6" fieldtype="System.Object[]" />
              <field name="Parent" attrib="6" fieldtype="System.Runtime.CompilerServices.ExecutionScope" />
            </fields>
            <methods>
              <method name="CreateDelegate(System.Int32, System.Object[])" attrib="134" returntype="System.Delegate">
                <parameters>
                  <parameter name="indexLambda" position="0" attrib="0" type="System.Int32" />
                  <parameter name="locals" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="CreateHoistedLocals()" attrib="134" returntype="System.Object[]">
                <parameters />
              </method>
              <method name="IsolateExpression(System.Linq.Expressions.Expression, System.Object[])" attrib="134" returntype="System.Linq.Expressions.Expression">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="locals" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IRuntimeVariables" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Object" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.Object)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IStrongBox" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_Value(System.Object)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ReadOnlyCollectionBuilder`1" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Collections.Generic.IEnumerable`1[T])" attrib="6278">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.Generic.IEnumerable`1[T]" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="capacity" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Capacity" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Capacity()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Capacity(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="T" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2534" virtual="true" returntype="T">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, T)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="T" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(T)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="CopyTo(T[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="T[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[T]">
                <parameters />
              </method>
              <method name="IndexOf(T)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, T)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="Remove(T)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="T" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Reverse()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Reverse(System.Int32, System.Int32)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="count" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="T[]">
                <parameters />
              </method>
              <method name="ToReadOnlyCollection()" attrib="134" returntype="System.Collections.ObjectModel.ReadOnlyCollection`1[T]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RuleCache`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerStepThroughAttribute" />
            </attributes>
            <generic-parameters>
              <generic-parameter name="T" attributes="4" />
            </generic-parameters>
          </class>
          <class name="RuntimeOps" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                <properties>
                  <property name="State" value="Never" />
                </properties>
              </attribute>
              <attribute name="System.Diagnostics.DebuggerStepThroughAttribute" />
            </attributes>
            <methods>
              <method name="CreateRuntimeVariables()" attrib="150" static="true" returntype="System.Runtime.CompilerServices.IRuntimeVariables">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="CreateRuntimeVariables(System.Object[], System.Int64[])" attrib="150" static="true" returntype="System.Runtime.CompilerServices.IRuntimeVariables">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="indexes" position="1" attrib="0" type="System.Int64[]" />
                </parameters>
              </method>
              <method name="ExpandoCheckVersion(System.Dynamic.ExpandoObject, System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expando" position="0" attrib="0" type="System.Dynamic.ExpandoObject" />
                  <parameter name="version" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ExpandoPromoteClass(System.Dynamic.ExpandoObject, System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expando" position="0" attrib="0" type="System.Dynamic.ExpandoObject" />
                  <parameter name="oldClass" position="1" attrib="0" type="System.Object" />
                  <parameter name="newClass" position="2" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ExpandoTryDeleteValue(System.Dynamic.ExpandoObject, System.Object, System.Int32, System.String, System.Boolean)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expando" position="0" attrib="0" type="System.Dynamic.ExpandoObject" />
                  <parameter name="indexClass" position="1" attrib="0" type="System.Object" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                  <parameter name="name" position="3" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="4" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ExpandoTryGetValue(System.Dynamic.ExpandoObject, System.Object, System.Int32, System.String, System.Boolean, out System.Object&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expando" position="0" attrib="0" type="System.Dynamic.ExpandoObject" />
                  <parameter name="indexClass" position="1" attrib="0" type="System.Object" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                  <parameter name="name" position="3" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="4" attrib="0" type="System.Boolean" />
                  <parameter name="value" position="5" attrib="2" type="System.Object&amp;" direction="out" />
                </parameters>
              </method>
              <method name="ExpandoTrySetValue(System.Dynamic.ExpandoObject, System.Object, System.Int32, System.Object, System.String, System.Boolean)" attrib="150" static="true" returntype="System.Object">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expando" position="0" attrib="0" type="System.Dynamic.ExpandoObject" />
                  <parameter name="indexClass" position="1" attrib="0" type="System.Object" />
                  <parameter name="index" position="2" attrib="0" type="System.Int32" />
                  <parameter name="value" position="3" attrib="0" type="System.Object" />
                  <parameter name="name" position="4" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="5" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables, System.Runtime.CompilerServices.IRuntimeVariables, System.Int32[])" attrib="150" static="true" returntype="System.Runtime.CompilerServices.IRuntimeVariables">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="first" position="0" attrib="0" type="System.Runtime.CompilerServices.IRuntimeVariables" />
                  <parameter name="second" position="1" attrib="0" type="System.Runtime.CompilerServices.IRuntimeVariables" />
                  <parameter name="indexes" position="2" attrib="0" type="System.Int32[]" />
                </parameters>
              </method>
              <method name="Quote(System.Linq.Expressions.Expression, System.Object, System.Object[])" attrib="150" static="true" returntype="System.Linq.Expressions.Expression">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="do not use this method" />
                      <property name="IsError" value="True" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="System.Linq.Expressions.Expression" />
                  <parameter name="hoistedLocals" position="1" attrib="0" type="System.Object" />
                  <parameter name="locals" position="2" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StrongBox`1" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.CompilerServices.IStrongBox" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <fields>
              <field name="Value" attrib="6" fieldtype="T" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(T)" attrib="6278">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Security.Cryptography">
        <classes>
          <class name="AesCryptoServiceProvider" type="class" base="System.Security.Cryptography.Aes" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CreateDecryptor(System.Byte[], System.Byte[])" attrib="198" virtual="true" is-override="true" returntype="System.Security.Cryptography.ICryptoTransform">
                <parameters>
                  <parameter name="rgbKey" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="rgbIV" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="CreateEncryptor(System.Byte[], System.Byte[])" attrib="198" virtual="true" is-override="true" returntype="System.Security.Cryptography.ICryptoTransform">
                <parameters>
                  <parameter name="rgbKey" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="rgbIV" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="GenerateIV()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GenerateKey()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="AesManaged" type="class" base="System.Security.Cryptography.Aes" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="CreateDecryptor(System.Byte[], System.Byte[])" attrib="198" virtual="true" is-override="true" returntype="System.Security.Cryptography.ICryptoTransform">
                <parameters>
                  <parameter name="rgbKey" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="rgbIV" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="CreateEncryptor(System.Byte[], System.Byte[])" attrib="198" virtual="true" is-override="true" returntype="System.Security.Cryptography.ICryptoTransform">
                <parameters>
                  <parameter name="rgbKey" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="rgbIV" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="GenerateIV()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="GenerateKey()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ECDiffieHellmanPublicKey" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Byte[])" attrib="6276">
                <parameters>
                  <parameter name="keyBlob" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ToByteArray()" attrib="454" virtual="true" returntype="System.Byte[]">
                <parameters />
              </method>
              <method name="ToXmlString()" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ECDsa" type="class" base="System.Security.Cryptography.AsymmetricAlgorithm" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="KeyExchangeAlgorithm" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_KeyExchangeAlgorithm()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SignatureAlgorithm" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SignatureAlgorithm()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Create()" attrib="150" static="true" returntype="System.Security.Cryptography.ECDsa">
                <parameters />
              </method>
              <method name="Create(System.String)" attrib="150" static="true" returntype="System.Security.Cryptography.ECDsa">
                <parameters>
                  <parameter name="algorithm" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)" attrib="452" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="hashAlgorithm" position="1" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)" attrib="452" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="hashAlgorithm" position="3" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName)" attrib="454" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="hashAlgorithm" position="1" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)" attrib="454" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="hashAlgorithm" position="1" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)" attrib="454" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="hashAlgorithm" position="3" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="SignHash(System.Byte[])" attrib="1478" abstract="true" virtual="true" returntype="System.Byte[]">
                <parameters>
                  <parameter name="hash" position="0" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
              <method name="VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="signature" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="hashAlgorithm" position="2" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.IO.Stream" />
                  <parameter name="signature" position="1" attrib="0" type="System.Byte[]" />
                  <parameter name="hashAlgorithm" position="2" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="offset" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                  <parameter name="signature" position="3" attrib="0" type="System.Byte[]" />
                  <parameter name="hashAlgorithm" position="4" attrib="0" type="System.Security.Cryptography.HashAlgorithmName" />
                </parameters>
              </method>
              <method name="VerifyHash(System.Byte[], System.Byte[])" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="hash" position="0" attrib="0" type="System.Byte[]" />
                  <parameter name="signature" position="1" attrib="0" type="System.Byte[]" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Threading">
        <classes>
          <class name="LockRecursionPolicy" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="NoRecursion" attrib="32854" fieldtype="System.Threading.LockRecursionPolicy" value="0" />
              <field name="SupportsRecursion" attrib="32854" fieldtype="System.Threading.LockRecursionPolicy" value="1" />
            </fields>
          </class>
          <class name="ReaderWriterLockSlim" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Threading.LockRecursionPolicy)" attrib="6278">
                <parameters>
                  <parameter name="recursionPolicy" position="0" attrib="0" type="System.Threading.LockRecursionPolicy" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentReadCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_CurrentReadCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadLockHeld" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadLockHeld()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsUpgradeableReadLockHeld" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsUpgradeableReadLockHeld()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWriteLockHeld" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWriteLockHeld()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RecursionPolicy" attrib="0" ptype="System.Threading.LockRecursionPolicy">
                <methods>
                  <method name="get_RecursionPolicy()" attrib="2182" returntype="System.Threading.LockRecursionPolicy">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RecursiveReadCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_RecursiveReadCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RecursiveUpgradeCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_RecursiveUpgradeCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RecursiveWriteCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_RecursiveWriteCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WaitingReadCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WaitingReadCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WaitingUpgradeCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WaitingUpgradeCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WaitingWriteCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_WaitingWriteCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Dispose()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="EnterReadLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="EnterUpgradeableReadLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="EnterWriteLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ExitReadLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ExitUpgradeableReadLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ExitWriteLock()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="TryEnterReadLock(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="millisecondsTimeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryEnterReadLock(System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryEnterUpgradeableReadLock(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="millisecondsTimeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryEnterUpgradeableReadLock(System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
              <method name="TryEnterWriteLock(System.Int32)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="millisecondsTimeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="TryEnterWriteLock(System.TimeSpan)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.TimeSpan" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="System.Threading.Tasks">
        <classes>
          <class name="TaskExtensions" type="class" base="System.Object" sealed="true" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            </attributes>
            <methods>
              <method name="Unwrap(System.Threading.Tasks.Task`1[System.Threading.Tasks.Task])" attrib="150" static="true" returntype="System.Threading.Tasks.Task">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="task" position="0" attrib="0" type="System.Threading.Tasks.Task`1[System.Threading.Tasks.Task]" />
                </parameters>
              </method>
              <method name="Unwrap(System.Threading.Tasks.Task`1[System.Threading.Tasks.Task`1[TResult]])" attrib="150" static="true" returntype="System.Threading.Tasks.Task`1[TResult]">
                <attributes>
                  <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
                </attributes>
                <parameters>
                  <parameter name="task" position="0" attrib="0" type="System.Threading.Tasks.Task`1[System.Threading.Tasks.Task`1[TResult]]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="TResult" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
    </namespaces>
  </assembly>
</assemblies>