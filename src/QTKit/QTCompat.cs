// autogenerated stub - do not edit
#if !XAMCORE_4_0

#pragma warning disable 0067

namespace QTKit {

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureConnection : Foundation.NSObject {
		public Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public void SetAttribute (Foundation.NSObject attribute, System.String key)
		{
		}

		public QTCaptureConnection ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureConnection (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureConnection (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual Foundation.NSObject GetAttribute (Foundation.NSString attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsAttributeReadOnly (System.String attributeKey)
		{
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject attribute, Foundation.NSString key)
		{
		}

		public QTKit.QTMediaType MediaTypeValue { get; }

		public override System.IntPtr ClassHandle { get; }

		public virtual Foundation.NSDictionary ConnectionAttributes { get; set; }

		public virtual System.Boolean Enabled { get; set; }

		public virtual QTKit.QTFormatDescription FormatDescription { get; }

		public virtual System.String MediaType { get; }

		public virtual Foundation.NSObject Owner { get; }

		static public Foundation.NSString AttributeDidChangeNotification { get; }

		static public Foundation.NSString AttributeWillChangeNotification { get; }

		static public Foundation.NSString AudioAveragePowerLevelsAttribute { get; }

		static public Foundation.NSString AudioMasterVolumeAttribute { get; }

		static public Foundation.NSString AudioPeakHoldLevelsAttribute { get; }

		static public Foundation.NSString AudioVolumesAttribute { get; }

		static public Foundation.NSString ChangedAttributeKey { get; }

		static public Foundation.NSString EnabledAudioChannelsAttribute { get; }

		static public Foundation.NSString FormatDescriptionDidChangeNotification { get; }

		static public Foundation.NSString FormatDescriptionWillChangeNotification { get; }

		[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
		public static class Notifications : System.Object {
			static public Foundation.NSObject ObserveAttributeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDevice : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable {
		static public QTKit.QTCaptureDevice[] GetInputDevices (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTCaptureDevice[]);
		}

		static public QTKit.QTCaptureDevice GetDefaultInputDevice (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTCaptureDevice);
		}

		public System.Boolean HasMediaType (QTKit.QTMediaType mediaType)
		{
			return default (System.Boolean);
		}

		public QTCaptureDevice (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDevice (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDevice (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void Close ()
		{
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		static public QTKit.QTCaptureDevice FromUniqueID (System.String deviceUniqueID)
		{
			return default (QTKit.QTCaptureDevice);
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsAttributeReadOnly (System.String attributeKey)
		{
			return default (System.Boolean);
		}

		public virtual System.Boolean Open (out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject attribute, System.String attributeKey)
		{
		}

		internal QTCaptureDevice ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public System.Boolean IsAvcTransportControlReadOnly { get; }

		public QTKit.QTCaptureDeviceTransportControl AvcTransportControl { get; set; }

		public System.Boolean IsSuspended { get; }

		public override System.IntPtr ClassHandle { get; }

		public virtual Foundation.NSDictionary DeviceAttributes { get; set; }

		public virtual QTKit.QTFormatDescription[] FormatDescriptions { get; }

		static public QTKit.QTCaptureDevice[] InputDevices { get; }

		public virtual System.Boolean IsConnected { get; }

		public virtual System.Boolean IsInUseByAnotherApplication { get; }

		public virtual System.Boolean IsOpen { get; }

		public virtual System.String LocalizedDisplayName { get; }

		public virtual System.String ModelUniqueID { get; }

		public virtual System.String UniqueID { get; }

		static public Foundation.NSString AVCTransportControlsAttribute { get; }

		static public Foundation.NSString AVCTransportControlsPlaybackModeKey { get; }

		static public Foundation.NSString AVCTransportControlsSpeedKey { get; }

		static public Foundation.NSString AttributeDidChangeNotification { get; }

		static public Foundation.NSString AttributeWillChangeNotification { get; }

		static public Foundation.NSString AvailableInputSourcesAttribute { get; }

		static public Foundation.NSString ChangedAttributeKey { get; }

		static public Foundation.NSString FormatDescriptionsDidChangeNotification { get; }

		static public Foundation.NSString FormatDescriptionsWillChangeNotification { get; }

		static public Foundation.NSString InputSourceIdentifierAttribute { get; }

		static public Foundation.NSString InputSourceIdentifierKey { get; }

		static public Foundation.NSString InputSourceLocalizedDisplayNameKey { get; }

		static public Foundation.NSString LegacySequenceGrabberAttribute { get; }

		static public Foundation.NSString LinkedDevicesAttribute { get; }

		static public Foundation.NSString SuspendedAttribute { get; }

		static public Foundation.NSString WasConnectedNotification { get; }

		static public Foundation.NSString WasDisconnectedNotification { get; }

		[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
		public static class Notifications : System.Object {
			static public Foundation.NSObject ObserveAttributeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveAttributeWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionsDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionsDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionsWillChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveFormatDescriptionsWillChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveWasConnected (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveWasConnected (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveWasDisconnected (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveWasDisconnected (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDeviceTransportControl : System.Object {
		public QTCaptureDeviceTransportControl ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureDeviceControlsSpeed? Speed { get; set; }

		public QTKit.QTCaptureDevicePlaybackMode? PlaybackMode { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCompressionOptions : Foundation.NSObject {
		public System.String[] GetCompressionOptionsIdentifiers (QTKit.QTMediaType forMediaType)
		{
			return default (System.String[]);
		}

		public QTCompressionOptions ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCompressionOptions (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCompressionOptions (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		static public Foundation.NSObject FromIdentifier (System.String identifier)
		{
			return default (Foundation.NSObject);
		}

		static public System.String[] GetCompressionOptionsIdentifiers (System.String forMediaType)
		{
			return default (System.String[]);
		}

		public virtual System.Boolean IsEqualToCompressionOptions (QTKit.QTCompressionOptions compressionOptions)
		{
			return default (System.Boolean);
		}

		public QTKit.QTMediaType MediaTypeValue { get; }

		public override System.IntPtr ClassHandle { get; }

		public virtual System.String LocalizedCompressionOptionsSummary { get; }

		public virtual System.String LocalizedDisplayName { get; }

		public virtual System.String MediaType { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTFormatDescription : Foundation.NSObject {
		public QTFormatDescription ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTFormatDescription (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTFormatDescription (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual Foundation.NSObject AttributeForKey (System.String key)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean IsEqualToFormatDescription (QTKit.QTFormatDescription formatDescription)
		{
			return default (System.Boolean);
		}

		public QTKit.QTMediaType MediaTypeValue { get; }

		public override System.IntPtr ClassHandle { get; }

		public virtual Foundation.NSDictionary FormatDescriptionAttributes { get; }

		public virtual System.UInt32 FormatType { get; }

		public virtual System.String LocalizedFormatSummary { get; }

		public virtual System.String MediaType { get; }

		public virtual Foundation.NSData QuickTimeSampleDescription { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMedia : Foundation.NSObject {
		public QTMedia ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMedia (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMedia (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual System.IntPtr Conditions (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		public System.IntPtr Constructors (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		static public Foundation.NSObject FromQuickTimeMedia (System.IntPtr quicktimeMedia, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (Foundation.NSObject);
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual System.Boolean HasCharacteristic (System.String characteristic)
		{
			return default (System.Boolean);
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual Foundation.NSDictionary MediaAttributes { get; set; }

		public virtual System.IntPtr QuickTimeMedia { get; }

		public virtual QTKit.QTTrack Track { get; }

		static public Foundation.NSString CharacteristicAudio { get; }

		static public Foundation.NSString CharacteristicCanSendVideo { get; }

		static public Foundation.NSString CharacteristicCanStep { get; }

		static public Foundation.NSString CharacteristicHasNoDuration { get; }

		static public Foundation.NSString CharacteristicHasSkinData { get; }

		static public Foundation.NSString CharacteristicHasVideoFrameRate { get; }

		static public Foundation.NSString CharacteristicNonLinear { get; }

		static public Foundation.NSString CharacteristicProvidesActions { get; }

		static public Foundation.NSString CharacteristicProvidesKeyFocus { get; }

		static public Foundation.NSString CharacteristicVisual { get; }

		static public Foundation.NSString CreationTimeAttribute { get; }

		static public Foundation.NSString DurationAttribute { get; }

		static public Foundation.NSString ModificationTimeAttribute { get; }

		static public Foundation.NSString QualityAttribute { get; }

		static public Foundation.NSString SampleCountAttribute { get; }

		static public Foundation.NSString TimeScaleAttribute { get; }

		static public Foundation.NSString TypeAttribute { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTCodecQuality : System.Int32 {
	Lossless = 1024,
	Max = 1023,
	Min = 0,
	Low = 256,
	Normal = 512,
	High = 768,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTImageAttributes : System.Object {
		public QTImageAttributes ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public Foundation.NSDictionary ToDictionary ()
		{
			return default (Foundation.NSDictionary);
		}

		public System.String CodecType { get; set; }

		public QTKit.QTCodecQuality? Quality { get; set; }

		public System.Int32? TimeScale { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieSaveOptions : System.Object {
		public QTMovieSaveOptions ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public Foundation.NSDictionary ToDictionary ()
		{
			return default (Foundation.NSDictionary);
		}

		public System.Boolean Flatten { get; set; }

		public QTKit.QTFileType? ExportType { get; set; }

		public Foundation.NSData ExportSettings { get; set; }

		public System.Int32? ManufacturerCode { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTTrack : Foundation.NSObject {
		public void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, QTKit.QTImageAttributes attributes)
		{
		}

		public QTTrack ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTTrack (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTTrack (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTTrack (System.IntPtr quicktimeTrack, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, Foundation.NSDictionary attributes)
		{
		}

		public virtual CoreGraphics.CGSize ApertureModeDimensionsForMode (System.String mode)
		{
			return default (CoreGraphics.CGSize);
		}

		public virtual void DeleteSegment (QTKit.QTTimeRange segment)
		{
		}

		static public Foundation.NSObject FromQuickTimeTrack (System.IntPtr quicktimeTrack, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (Foundation.NSObject);
		}

		public virtual void GenerateApertureModeDimensions ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual void InsertEmptySegment (QTKit.QTTimeRange range)
		{
		}

		public virtual void InsertSegmentOfTrack (QTKit.QTTrack track, QTKit.QTTimeRange timeRange, QTKit.QTTime atTime)
		{
		}

		public virtual void InsertSegmentOfTrack (QTKit.QTTrack track, QTKit.QTTimeRange fromRange, QTKit.QTTimeRange scaledToRange)
		{
		}

		public virtual void RemoveApertureModeDimensions ()
		{
		}

		public virtual void ScaleSegmentnewDuration (QTKit.QTTimeRange segment, QTKit.QTTime newDuration)
		{
		}

		public virtual void SetApertureModeDimensionsforMode (CoreGraphics.CGSize dimensions, System.String mode)
		{
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.Boolean Enabled { get; set; }

		public virtual QTKit.QTMedia Media { get; }

		public virtual QTKit.QTMovie Movie { get; }

		public virtual System.IntPtr QuickTimeTrack { get; }

		public virtual Foundation.NSDictionary TrackAttributes { get; set; }

		public virtual System.Single Volume { get; set; }

		static public Foundation.NSString BoundsAttribute { get; }

		static public Foundation.NSString CreationTimeAttribute { get; }

		static public Foundation.NSString DimensionsAttribute { get; }

		static public Foundation.NSString DisplayNameAttribute { get; }

		static public Foundation.NSString EnabledAttribute { get; }

		static public Foundation.NSString FormatSummaryAttribute { get; }

		static public Foundation.NSString HasApertureModeDimensionsAttribute { get; }

		static public Foundation.NSString IDAttribute { get; }

		static public Foundation.NSString IsChapterTrackAttribute { get; }

		static public Foundation.NSString LayerAttribute { get; }

		static public Foundation.NSString MediaTypeAttribute { get; }

		static public Foundation.NSString ModificationTimeAttribute { get; }

		static public Foundation.NSString RangeAttribute { get; }

		static public Foundation.NSString TimeScaleAttribute { get; }

		static public Foundation.NSString UsageInMovieAttribute { get; }

		static public Foundation.NSString UsageInPosterAttribute { get; }

		static public Foundation.NSString UsageInPreviewAttribute { get; }

		static public Foundation.NSString VolumeAttribute { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovie : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable, Foundation.INSCopying {
		public System.Boolean SaveTo (System.String fileName, QTKit.QTMovieSaveOptions options, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public System.Boolean SaveTo (System.String fileName, QTKit.QTMovieSaveOptions options)
		{
			return default (System.Boolean);
		}

		public void AddImage (AppKit.NSImage image, QTKit.QTTime forDuration, QTKit.QTImageAttributes attributes)
		{
		}

		public QTKit.QTTrack[] TracksOfMediaType (QTKit.QTMediaType mediaType)
		{
			return default (QTKit.QTTrack[]);
		}

		public QTMovie ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovie (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovie (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (System.String fileName, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSUrl url, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTDataReference dataReference, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (AppKit.NSPasteboard pasteboard, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSData data, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTMovie movie, QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovie (Foundation.NSMutableData data, out Foundation.NSError error)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void AddImage (AppKit.NSImage image, QTKit.QTTime duration, Foundation.NSDictionary attributes)
		{
		}

		public virtual void AppendSelectionFromMovie (QTKit.QTMovie movie)
		{
		}

		public virtual System.Boolean AttachToCurrentThread ()
		{
			return default (System.Boolean);
		}

		public virtual void Autoplay ()
		{
		}

		static public System.Boolean CanInitWithFile (System.String fileName)
		{
			return default (System.Boolean);
		}

		static public System.Boolean CanInitWithPasteboard (AppKit.NSPasteboard pasteboard)
		{
			return default (System.Boolean);
		}

		static public System.Boolean CanInitWithUrl (Foundation.NSUrl url)
		{
			return default (System.Boolean);
		}

		public virtual System.nint ChapterIndexForTime (QTKit.QTTime time)
		{
			return default (System.nint);
		}

		public virtual Foundation.NSDictionary[] Chapters ()
		{
			return default (Foundation.NSDictionary[]);
		}

		public virtual Foundation.NSObject Copy (Foundation.NSZone zone)
		{
			return default (Foundation.NSObject);
		}

		public virtual void DeleteSegment (QTKit.QTTimeRange segment)
		{
		}

		public virtual System.Boolean DetachFromCurrentThread ()
		{
			return default (System.Boolean);
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		static public void EnterQTKitOnThread ()
		{
		}

		static public void EnterQTKitOnThreadDisablingThreadSafetyProtection ()
		{
		}

		static public void ExitQTKitOnThread ()
		{
		}

		public virtual AppKit.NSImage FrameImageAtTime (QTKit.QTTime time)
		{
			return default (AppKit.NSImage);
		}

		public virtual System.IntPtr FrameImageAtTime (QTKit.QTTime time, Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.IntPtr);
		}

		static public QTKit.QTMovie FromAttributes (Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		static public QTKit.QTMovie FromData (Foundation.NSData data, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		static public QTKit.QTMovie FromFile (System.String fileName, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		static public QTKit.QTMovie FromMovieNamed (System.String name, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		static public QTKit.QTMovie FromPasteboard (AppKit.NSPasteboard pasteboard, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		static public QTKit.QTMovie FromUrl (Foundation.NSUrl url, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public virtual void GenerateApertureModeDimensions ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String attributeKey)
		{
			return default (Foundation.NSObject);
		}

		public virtual void GotoBeginning ()
		{
		}

		public virtual void GotoEnd ()
		{
		}

		public virtual void GotoNextSelectionPoint ()
		{
		}

		public virtual void GotoPosterTime ()
		{
		}

		public virtual void GotoPreviousSelectionPoint ()
		{
		}

		public virtual void InsertEmptySegmentAt (QTKit.QTTimeRange range)
		{
		}

		public virtual void InsertSegmentOfMovieFromRange (QTKit.QTMovie movie, QTKit.QTTimeRange srcRange, QTKit.QTTimeRange dstRange)
		{
		}

		public virtual void InsertSegmentOfMovieTimeRange (QTKit.QTMovie movie, QTKit.QTTimeRange range, QTKit.QTTime time)
		{
		}

		public virtual QTKit.QTTrack InsertSegmentOfTrackFromRange (QTKit.QTTrack track, QTKit.QTTimeRange srcRange, QTKit.QTTimeRange dstRange)
		{
			return default (QTKit.QTTrack);
		}

		public virtual QTKit.QTTrack InsertSegmentOfTrackTimeRange (QTKit.QTTrack track, QTKit.QTTimeRange range, QTKit.QTTime time)
		{
			return default (QTKit.QTTrack);
		}

		public virtual void Invalidate ()
		{
		}

		static public System.String[] MovieFileTypes (QTKit.QTMovieFileTypeOptions types)
		{
			return default (System.String[]);
		}

		public virtual Foundation.NSData MovieFormatRepresentation ()
		{
			return default (Foundation.NSData);
		}

		static public System.String[] MovieTypesWithOptions (QTKit.QTMovieFileTypeOptions types)
		{
			return default (System.String[]);
		}

		static public System.String[] MovieUnfilteredFileTypes ()
		{
			return default (System.String[]);
		}

		static public System.String[] MovieUnfilteredPasteboardTypes ()
		{
			return default (System.String[]);
		}

		public QTKit.QTMovie MovieWithTimeRange (QTKit.QTTimeRange range, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (QTKit.QTMovie);
		}

		public virtual void Play ()
		{
		}

		public virtual void RemoveApertureModeDimensions ()
		{
		}

		public virtual System.Boolean RemoveChapters ()
		{
			return default (System.Boolean);
		}

		public virtual void RemoveTrack (QTKit.QTTrack track)
		{
		}

		public virtual void ReplaceSelectionWithSelectionFromMovie (QTKit.QTMovie movie)
		{
		}

		public virtual System.Boolean SaveTo (System.String fileName, Foundation.NSDictionary attributes)
		{
			return default (System.Boolean);
		}

		public virtual System.Boolean SaveTo (System.String fileName, Foundation.NSDictionary attributes, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void ScaleSegmentNewDuration (QTKit.QTTimeRange segment, QTKit.QTTime newDuration)
		{
		}

		public virtual QTKit.QTTime SelectionDuration ()
		{
			return default (QTKit.QTTime);
		}

		public virtual QTKit.QTTime SelectionEnd ()
		{
			return default (QTKit.QTTime);
		}

		public virtual QTKit.QTTime SelectionStart ()
		{
			return default (QTKit.QTTime);
		}

		public virtual void SetAttribute (Foundation.NSObject value, System.String attributeKey)
		{
		}

		public virtual void SetSelection (QTKit.QTTimeRange selection)
		{
		}

		public virtual QTKit.QTTime StartTimeOfChapter (System.nint chapterIndex)
		{
			return default (QTKit.QTTime);
		}

		public virtual void StepBackward ()
		{
		}

		public virtual void StepForward ()
		{
		}

		public virtual void Stop ()
		{
		}

		public virtual QTKit.QTTrack[] TracksOfMediaType (System.String type)
		{
			return default (QTKit.QTTrack[]);
		}

		public virtual System.Boolean UpdateMovieFile ()
		{
			return default (System.Boolean);
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.Boolean CanUpdateMovieFile { get; }

		public virtual System.nint ChapterCount { get; }

		public virtual AppKit.NSImage CurrentFrameImage { get; }

		public virtual QTKit.QTTime CurrentTime { get; set; }

		public virtual QTKit.QTTime Duration { get; }

		public virtual System.Boolean HasChapters { get; }

		public virtual System.Boolean Idling { get; }

		static public QTKit.QTMovie Movie { get; }

		public virtual Foundation.NSDictionary MovieAttributes { get; set; }

		public virtual System.Boolean Muted { get; set; }

		public virtual AppKit.NSImage PosterImage { get; }

		public virtual System.Single Rate { get; set; }

		public virtual QTKit.QTTrack[] Tracks { get; }

		public virtual System.Single Volume { get; set; }

		public virtual Foundation.NSObject WeakDelegate { get; set; }

		static public Foundation.NSString ActiveSegmentAttribute { get; }

		static public Foundation.NSString ApertureModeAttribute { get; }

		static public Foundation.NSString ApertureModeClassic { get; }

		static public Foundation.NSString ApertureModeClean { get; }

		static public Foundation.NSString ApertureModeDidChangeNotification { get; }

		static public Foundation.NSString ApertureModeEncodedPixels { get; }

		static public Foundation.NSString ApertureModeProduction { get; }

		static public Foundation.NSString AskUnresolvedDataRefsAttribute { get; }

		static public Foundation.NSString AutoAlternatesAttribute { get; }

		static public Foundation.NSString ChapterDidChangeNotification { get; }

		static public Foundation.NSString ChapterListDidChangeNotification { get; }

		static public Foundation.NSString ChapterName { get; }

		static public Foundation.NSString ChapterStartTime { get; }

		static public Foundation.NSString ChapterTargetTrackAttribute { get; }

		static public Foundation.NSString CloseWindowRequestNotification { get; }

		static public Foundation.NSString CopyrightAttribute { get; }

		static public Foundation.NSString CreationTimeAttribute { get; }

		static public Foundation.NSString CurrentSizeAttribute { get; }

		static public Foundation.NSString CurrentTimeAttribute { get; }

		static public Foundation.NSString DataAttribute { get; }

		static public Foundation.NSString DataReferenceAttribute { get; }

		static public Foundation.NSString DataSizeAttribute { get; }

		static public Foundation.NSString DelegateAttribute { get; }

		static public Foundation.NSString DidEndNotification { get; }

		static public Foundation.NSString DisplayNameAttribute { get; }

		static public Foundation.NSString DontInteractWithUserAttribute { get; }

		static public Foundation.NSString DurationAttribute { get; }

		static public Foundation.NSString EditabilityDidChangeNotification { get; }

		static public Foundation.NSString EditableAttribute { get; }

		static public Foundation.NSString EditedNotification { get; }

		static public Foundation.NSString EnterFullScreenRequestNotification { get; }

		static public Foundation.NSString ExitFullScreenRequestNotification { get; }

		static public Foundation.NSString FileNameAttribute { get; }

		static public Foundation.NSString FileOffsetAttribute { get; }

		static public Foundation.NSString FrameImageDeinterlaceFields { get; }

		static public Foundation.NSString FrameImageHighQuality { get; }

		static public Foundation.NSString FrameImageOpenGLContext { get; }

		static public Foundation.NSString FrameImagePixelFormat { get; }

		static public Foundation.NSString FrameImageRepresentationsType { get; }

		static public Foundation.NSString FrameImageSingleField { get; }

		static public Foundation.NSString FrameImageSize { get; }

		static public Foundation.NSString FrameImageType { get; }

		static public Foundation.NSString FrameImageTypeCGImageRef { get; }

		static public Foundation.NSString FrameImageTypeCIImage { get; }

		static public Foundation.NSString FrameImageTypeCVOpenGLTextureRef { get; }

		static public Foundation.NSString FrameImageTypeCVPixelBufferRef { get; }

		static public Foundation.NSString FrameImageTypeNSImage { get; }

		static public Foundation.NSString HasApertureModeDimensionsAttribute { get; }

		static public Foundation.NSString HasAudioAttribute { get; }

		static public Foundation.NSString HasDurationAttribute { get; }

		static public Foundation.NSString HasVideoAttribute { get; }

		static public Foundation.NSString IsActiveAttribute { get; }

		static public Foundation.NSString IsInteractiveAttribute { get; }

		static public Foundation.NSString IsLinearAttribute { get; }

		static public Foundation.NSString IsSteppableAttribute { get; }

		static public Foundation.NSString LoadStateAttribute { get; }

		static public Foundation.NSString LoadStateDidChangeNotification { get; }

		static public Foundation.NSString LoopModeDidChangeNotification { get; }

		static public Foundation.NSString LoopsAttribute { get; }

		static public Foundation.NSString LoopsBackAndForthAttribute { get; }

		static public Foundation.NSString MessageNotificationParameter { get; }

		static public Foundation.NSString MessageStringPostedNotification { get; }

		static public Foundation.NSString ModificationTimeAttribute { get; }

		static public Foundation.NSString MutedAttribute { get; }

		static public Foundation.NSString NaturalSizeAttribute { get; }

		static public Foundation.NSString OpenAsyncOKAttribute { get; }

		static public Foundation.NSString PasteboardAttribute { get; }

		static public Foundation.NSString PasteboardType { get; }

		static public Foundation.NSString PlaysAllFramesAttribute { get; }

		static public Foundation.NSString PlaysSelectionOnlyAttribute { get; }

		static public Foundation.NSString PosterTimeAttribute { get; }

		static public Foundation.NSString PreferredMutedAttribute { get; }

		static public Foundation.NSString PreferredRateAttribute { get; }

		static public Foundation.NSString PreferredVolumeAttribute { get; }

		static public Foundation.NSString PreviewModeAttribute { get; }

		static public Foundation.NSString PreviewRangeAttribute { get; }

		static public Foundation.NSString RateAttribute { get; }

		static public Foundation.NSString RateChangesPreservePitchAttribute { get; }

		static public Foundation.NSString RateDidChangeNotification { get; }

		static public Foundation.NSString RateDidChangeNotificationParameter { get; }

		static public Foundation.NSString ResolveDataRefsAttribute { get; }

		static public Foundation.NSString SelectionAttribute { get; }

		static public Foundation.NSString SelectionDidChangeNotification { get; }

		static public Foundation.NSString SizeDidChangeNotification { get; }

		static public Foundation.NSString StatusCodeNotificationParameter { get; }

		static public Foundation.NSString StatusFlagsNotificationParameter { get; }

		static public Foundation.NSString StatusStringNotificationParameter { get; }

		static public Foundation.NSString StatusStringPostedNotification { get; }

		static public Foundation.NSString TargetIDNotificationParameter { get; }

		static public Foundation.NSString TargetNameNotificationParameter { get; }

		static public Foundation.NSString TimeDidChangeNotification { get; }

		static public Foundation.NSString TimeScaleAttribute { get; }

		static public Foundation.NSString URLAttribute { get; }

		static public Foundation.NSString UneditableException { get; }

		static public Foundation.NSString VolumeAttribute { get; }

		static public Foundation.NSString VolumeDidChangeNotification { get; }

		[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
		public static class Notifications : System.Object {
			static public Foundation.NSObject ObserveApertureModeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveApertureModeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveChapterDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveChapterDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveChapterListDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveChapterListDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveCloseWindowRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveCloseWindowRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveDidEnd (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveDidEnd (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEditabilityDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEditabilityDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEdited (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEdited (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEnterFullScreenRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveEnterFullScreenRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveExitFullScreenRequest (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveExitFullScreenRequest (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveLoadStateDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveLoadStateDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveLoopModeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveLoopModeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveMessageStringPosted (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveMessageStringPosted (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveRateDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveRateDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveSelectionDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveSelectionDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveSizeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveSizeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveStatusStringPosted (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveStatusStringPosted (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveTimeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveTimeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveVolumeDidChange (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveVolumeDidChange (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public struct QTTime {
		static public readonly QTKit.QTTime Zero;

		static public readonly QTKit.QTTime IndefiniteTime;

		public QTTime (System.Int64 timeValue, System.nint timeScale, QTKit.TimeFlags flags)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTTime (System.Int64 timeValue, System.nint timeScale)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.String ToString ()
		{
			return default (System.String);
		}

		public System.Int64 TimeValue { get; set; }

		public System.nint TimeScale { get; set; }

		public QTKit.TimeFlags Flags { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public struct QTTimeRange {
		public QTTimeRange (QTKit.QTTime time, QTKit.QTTime duration)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.String ToString ()
		{
			return default (System.String);
		}

		public QTKit.QTTime Time { get; set; }

		public QTKit.QTTime Duration { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[System.Flags]	public enum TimeFlags : System.Int32 {
	TimeIsIndefinite = 1,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[System.Flags]	public enum QTMovieFileTypeOptions : System.UInt32 {
	StillImageTypes = 1,
	TranslatableTypes = 2,
	AggressiveTypes = 4,
	DynamicTypes = 8,
	CommonTypes = 0,
	AllTypes = 65535,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]	public enum QTCaptureDevicePlaybackMode : System.UInt64 {
	NotPlaying = 0,
	Playing = 1,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]	public enum QTCaptureDeviceControlsSpeed : System.Int64 {
	FastestReverse = -19000,
	VeryFastReverse = -16000,
	FastReverse = -13000,
	NormalReverse = -10000,
	SlowReverse = -7000,
	VerySlowReverse = -4000,
	SlowestReverse = -1000,
	Stopped = 0,
	SlowestForward = 1000,
	VerySlowForward = 4000,
	SlowForward = 7000,
	NormalForward = 10000,
	FastForward = 13000,
	VeryFastForward = 16000,
	FastestForward = 19000,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]	public enum QTCaptureDestination : System.UInt64 {
	NewFile = 1,
	OldFile = 2,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	[ObjCRuntime.Native]	public enum QTError : System.Int64 {
	Unknown = -1,
	None = 0,
	IncompatibleInput = 1002,
	IncompatibleOutput = 1003,
	InvalidInputsOrOutputs = 1100,
	DeviceAlreadyUsedbyAnotherSession = 1101,
	NoDataCaptured = 1200,
	SessionConfigurationChanged = 1201,
	DiskFull = 1202,
	DeviceWasDisconnected = 1203,
	MediaChanged = 1204,
	MaximumDurationReached = 1205,
	MaximumFileSizeReached = 1206,
	MediaDiscontinuity = 1207,
	MaximumNumberOfSamplesForFileFormatReached = 1208,
	DeviceNotConnected = 1300,
	DeviceInUseByAnotherApplication = 1301,
	DeviceExcludedByAnotherDevice = 1302,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTMediaType : System.Int32 {
	Video = 0,
	Sound = 1,
	Text = 2,
	Base = 3,
	Mpeg = 4,
	Music = 5,
	TimeCode = 6,
	Sprite = 7,
	Flash = 8,
	Movie = 9,
	Tween = 10,
	Type3D = 11,
	Skin = 12,
	Qtvr = 13,
	Hint = 14,
	Stream = 15,
	Muxed = 16,
	QuartzComposer = 17,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public enum QTFileType : System.Int32 {
	AIFF = 1095321158,
	AIFC = 1095321155,
	DVC = 1685480225,
	MIDI = 1298752617,
	Picture = 1346978644,
	Movie = 1299148630,
	Text = 1413830740,
	Wave = 1463899717,
	SystemSevenSound = 1936091500,
	MuLaw = 1431060823,
	AVI = 1449547552,
	SoundDesignerII = 1399075430,
	AudioCDTrack = 1953653099,
	PICS = 1346978643,
	GIF = 1195984486,
	PNG = 1347307366,
	TIFF = 1414088262,
	PhotoShop = 943870035,
	SGIImage = 777209673,
	BMP = 1112363110,
	JPEG = 1246774599,
	JFIF = 1246774599,
	MacPaint = 1347310663,
	TargaImage = 1414547779,
	QuickDrawGXPicture = 1902405496,
	QuickTimeImage = 1903454566,
	T3DMF = 860114246,
	FLC = 1179403040,
	Flash = 1398228556,
	FlashPix = 1179675000,
	MP4 = 1836082996,
	PDF = 1346651680,
	T3GPP = 862417008,
	AMR = 1634562592,
	SDV = 1935963680,
	T3GP2 = 862416946,
	AMC = 1634558752,
	JPEG2000 = 1785737760,
}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureAudioPreviewOutput : QTKit.QTCaptureOutput {
		public QTCaptureAudioPreviewOutput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureAudioPreviewOutput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureAudioPreviewOutput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.String OutputDeviceUniqueID { get; set; }

		public virtual System.Single Volume { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDecompressedVideoOutput : QTKit.QTCaptureOutput {
		public QTCaptureDecompressedVideoOutput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDecompressedVideoOutput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDecompressedVideoOutput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void OutputVideoFrame (CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.Boolean AutomaticallyDropsLateVideoFrames { get; set; }

		public QTKit.IQTCaptureDecompressedVideoOutputDelegate Delegate { get; set; }

		public virtual System.Double MinimumVideoFrameInterval { get; set; }

		public virtual Foundation.NSDictionary PixelBufferAttributes { get; set; }

		public virtual Foundation.NSObject WeakDelegate { get; set; }

		public event System.EventHandler<QTKit.QTCaptureVideoDroppedEventArgs> DidDropVideoFrame;
		public event System.EventHandler<QTKit.QTCaptureVideoFrameEventArgs> DidOutputVideoFrame;
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureVideoDroppedEventArgs : System.EventArgs {
		public QTCaptureVideoDroppedEventArgs (QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureVideoDroppedEventArgs ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection { get; set; }

		public QTKit.QTSampleBuffer SampleBuffer { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureVideoFrameEventArgs : System.EventArgs {
		public QTCaptureVideoFrameEventArgs (CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureVideoFrameEventArgs ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection { get; set; }

		public QTKit.QTSampleBuffer SampleBuffer { get; set; }

		public CoreVideo.CVImageBuffer VideoFrame { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureDecompressedVideoOutputDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureDecompressedVideoOutputDelegate_Extensions : System.Object {
		static public void DidOutputVideoFrame (this QTKit.IQTCaptureDecompressedVideoOutputDelegate This, QTKit.QTCaptureOutput captureOutput, CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		static public void DidDropVideoFrame (this QTKit.IQTCaptureDecompressedVideoOutputDelegate This, QTKit.QTCaptureOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDecompressedVideoOutputDelegate : Foundation.NSObject, QTKit.IQTCaptureDecompressedVideoOutputDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureDecompressedVideoOutputDelegate ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureDecompressedVideoOutputDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDecompressedVideoOutputDelegate (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DidDropVideoFrame (QTKit.QTCaptureOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public virtual void DidOutputVideoFrame (QTKit.QTCaptureOutput captureOutput, CoreVideo.CVImageBuffer videoFrame, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureDeviceInput : QTKit.QTCaptureInput {
		protected QTCaptureDeviceInput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureDeviceInput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureDeviceInput (QTKit.QTCaptureDevice device)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		static public QTKit.QTCaptureDeviceInput FromDevice (QTKit.QTCaptureDevice device)
		{
			return default (QTKit.QTCaptureDeviceInput);
		}

		internal QTCaptureDeviceInput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureDevice Device { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileOutput : QTKit.QTCaptureOutput {
		protected QTCaptureFileOutput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureFileOutput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual QTKit.QTCompressionOptions GetCompressionOptions (QTKit.QTCaptureConnection forConnection)
		{
			return default (QTKit.QTCompressionOptions);
		}

		public virtual void PauseRecording ()
		{
		}

		public virtual void RecordToOutputFile (Foundation.NSUrl url)
		{
		}

		public virtual void RecordToOutputFile (Foundation.NSUrl url, QTKit.QTCaptureDestination bufferDestination)
		{
		}

		public virtual void ResumeRecording ()
		{
		}

		public virtual void SetCompressionOptions (QTKit.QTCompressionOptions compressionOptions, QTKit.QTCaptureConnection forConnection)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		internal QTCaptureFileOutput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public QTKit.IQTCaptureFileOutputDelegate Delegate { get; set; }

		public virtual System.Boolean IsRecordingPaused { get; }

		public virtual QTKit.QTTime MaximumRecordedDuration { get; set; }

		public virtual System.UInt64 MaximumRecordedFileSize { get; set; }

		public virtual CoreGraphics.CGSize MaximumVideoSize { get; set; }

		public virtual System.Double MinimumVideoFrameInterval { get; set; }

		public virtual Foundation.NSUrl OutputFileUrl { get; }

		public virtual QTKit.QTTime RecordedDuration { get; }

		public virtual System.UInt64 RecordedFileSize { get; }

		public virtual Foundation.NSObject WeakDelegate { get; set; }

		public QTKit.QTCaptureFileError ShouldChangeOutputFile { get; set; }

		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> DidFinishRecording;
		public event System.EventHandler<QTKit.QTCaptureFileSampleEventArgs> DidOutputSampleBuffer;
		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidPauseRecording;
		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidResumeRecording;
		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> DidStartRecording;
		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> MustChangeOutputFile;
		public event System.EventHandler<QTKit.QTCaptureFileErrorEventArgs> WillFinishRecording;
		public event System.EventHandler<QTKit.QTCaptureFileUrlEventArgs> WillStartRecording;
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileErrorEventArgs : System.EventArgs {
		public QTCaptureFileErrorEventArgs (Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileErrorEventArgs ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection[] Connections { get; set; }

		public Foundation.NSUrl OutputFileURL { get; set; }

		public Foundation.NSError Reason { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileSampleEventArgs : System.EventArgs {
		public QTCaptureFileSampleEventArgs (QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileSampleEventArgs ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection Connection { get; set; }

		public QTKit.QTSampleBuffer SampleBuffer { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileUrlEventArgs : System.EventArgs {
		public QTCaptureFileUrlEventArgs (Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureFileUrlEventArgs ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTKit.QTCaptureConnection[] Connections { get; set; }

		public Foundation.NSUrl FileUrl { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureFileOutputDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureFileOutputDelegate_Extensions : System.Object {
		static public void DidOutputSampleBuffer (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		static public void WillStartRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		static public void DidStartRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		static public System.Boolean ShouldChangeOutputFile (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
			return default (System.Boolean);
		}

		static public void MustChangeOutputFile (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		static public void WillFinishRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		static public void DidFinishRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		static public void DidPauseRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		static public void DidResumeRecording (this QTKit.IQTCaptureFileOutputDelegate This, QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureFileOutputDelegate : Foundation.NSObject, QTKit.IQTCaptureFileOutputDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureFileOutputDelegate ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureFileOutputDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureFileOutputDelegate (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DidFinishRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		public virtual void DidOutputSampleBuffer (QTKit.QTCaptureFileOutput captureOutput, QTKit.QTSampleBuffer sampleBuffer, QTKit.QTCaptureConnection connection)
		{
		}

		public virtual void DidPauseRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		public virtual void DidResumeRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		public virtual void DidStartRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

		public virtual void MustChangeOutputFile (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		public virtual System.Boolean ShouldChangeOutputFile (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
			return default (System.Boolean);
		}

		public virtual void WillFinishRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason)
		{
		}

		public virtual void WillStartRecording (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl fileUrl, QTKit.QTCaptureConnection[] connections)
		{
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureInput : Foundation.NSObject {
		protected QTCaptureInput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureInput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureInput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureConnection[] Connections { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureLayer : CoreAnimation.CALayer {
		public QTCaptureLayer ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureLayer (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureLayer (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureLayer (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureLayer (QTKit.QTCaptureSession session)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		static public Foundation.NSObject FromSession (QTKit.QTCaptureSession session)
		{
			return default (Foundation.NSObject);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureSession Session { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureMovieFileOutput : QTKit.QTCaptureFileOutput {
		public QTCaptureMovieFileOutput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureMovieFileOutput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureMovieFileOutput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureOutput : Foundation.NSObject {
		protected QTCaptureOutput (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureOutput (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		internal QTCaptureOutput ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureConnection[] Connections { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureSession : Foundation.NSObject {
		public QTCaptureSession ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureSession (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureSession (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual System.Boolean AddInput (QTKit.QTCaptureInput input, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual System.Boolean AddOutput (QTKit.QTCaptureOutput output, out Foundation.NSError error)
		{
			error = default (Foundation.NSError);
			return default (System.Boolean);
		}

		public virtual void RemoveInput (QTKit.QTCaptureInput input)
		{
		}

		public virtual void RemoveOutput (QTKit.QTCaptureOutput output)
		{
		}

		public virtual void StartRunning ()
		{
		}

		public virtual void StopRunning ()
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureInput[] Inputs { get; }

		public virtual System.Boolean IsRunning { get; }

		public virtual QTKit.QTCaptureOutput[] Outputs { get; }

		static public Foundation.NSString ErrorKey { get; }

		static public Foundation.NSString RuntimeErrorNotification { get; }

		[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
		public static class Notifications : System.Object {
			static public Foundation.NSObject ObserveRuntimeError (System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

			static public Foundation.NSObject ObserveRuntimeError (Foundation.NSObject objectToObserve, System.EventHandler<Foundation.NSNotificationEventArgs> handler)
			{
				return default (Foundation.NSObject);
			}

		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureView : AppKit.NSView {
		public QTCaptureView ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureView (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureView (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureView (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTCaptureView (CoreGraphics.CGRect frameRect)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTCaptureConnection[] AvailableVideoPreviewConnections { get; }

		public virtual QTKit.QTCaptureSession CaptureSession { get; set; }

		public QTKit.IQTCaptureViewDelegate Delegate { get; set; }

		public virtual AppKit.NSColor FillColor { get; set; }

		public virtual System.Boolean PreservesAspectRatio { get; set; }

		public virtual CoreGraphics.CGRect PreviewBounds { get; }

		public virtual QTKit.QTCaptureConnection VideoPreviewConnection { get; set; }

		public virtual Foundation.NSObject WeakDelegate { get; set; }

		public QTKit.QTCaptureImageEvent WillDisplayImage { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTCaptureViewDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTCaptureViewDelegate_Extensions : System.Object {
		static public CoreImage.CIImage WillDisplayImage (this QTKit.IQTCaptureViewDelegate This, QTKit.QTCaptureView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTCaptureViewDelegate : Foundation.NSObject, QTKit.IQTCaptureViewDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTCaptureViewDelegate ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTCaptureViewDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTCaptureViewDelegate (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual CoreImage.CIImage WillDisplayImage (QTKit.QTCaptureView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTDataReference : Foundation.NSObject, Foundation.INSCoding, ObjCRuntime.INativeObject, System.IDisposable {
		public QTDataReference ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTDataReference (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTDataReference (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTDataReference (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void EncodeTo (Foundation.NSCoder encoder)
		{
		}

		static public Foundation.NSObject FromDataRefData (Foundation.NSData dataRefData, System.String type)
		{
			return default (Foundation.NSObject);
		}

		static public Foundation.NSObject FromDataReference (Foundation.NSData data)
		{
			return default (Foundation.NSObject);
		}

		static public Foundation.NSObject FromReference (System.String fileName)
		{
			return default (Foundation.NSObject);
		}

		static public Foundation.NSObject FromReference (Foundation.NSUrl url)
		{
			return default (Foundation.NSObject);
		}

		static public Foundation.NSObject FromReference (Foundation.NSData data, System.String name, System.String mimeType)
		{
			return default (Foundation.NSObject);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual Foundation.NSData DataRefData { get; }

		public virtual System.String DataRefType { get; set; }

		public virtual System.String MimeType { get; }

		public virtual System.String Name { get; }

		public virtual Foundation.NSData ReferenceData { get; }

		public virtual System.String ReferenceFile { get; }

		public virtual Foundation.NSUrl ReferenceUrl { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTErrorKey : System.Object {
		static public Foundation.NSString CaptureInput { get; }

		static public Foundation.NSString CaptureOutput { get; }

		static public Foundation.NSString Device { get; }

		static public Foundation.NSString Domain { get; }

		static public Foundation.NSString ExcludingDevice { get; }

		static public Foundation.NSString FileSize { get; }

		static public Foundation.NSString RecordingSuccesfullyFinished { get; }

		static public Foundation.NSString Time { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieLayer : CoreAnimation.CALayer {
		public QTMovieLayer ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieLayer (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieLayer (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieLayer (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieLayer (QTKit.QTMovie movie)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		static public QTKit.QTMovieLayer FromMovie (QTKit.QTMovie movie)
		{
			return default (QTKit.QTMovieLayer);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual QTKit.QTMovie Movie { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieView : AppKit.NSView {
		public QTMovieView ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieView (Foundation.NSCoder coder)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieView (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieView (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public QTMovieView (CoreGraphics.CGRect frameRect)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void Add (Foundation.NSObject sender)
		{
		}

		public virtual void AddScaled (Foundation.NSObject sender)
		{
		}

		public virtual void Copy (Foundation.NSObject sender)
		{
		}

		public virtual void Cut (Foundation.NSObject sender)
		{
		}

		public virtual void Delete (Foundation.NSObject sender)
		{
		}

		public virtual void GotoBeginning (Foundation.NSObject sender)
		{
		}

		public virtual void GotoEnd (Foundation.NSObject sender)
		{
		}

		public virtual void GotoNextSelectionPoint (Foundation.NSObject sender)
		{
		}

		public virtual void GotoPosterFrame (Foundation.NSObject sender)
		{
		}

		public virtual void GotoPreviousSelectionPoint (Foundation.NSObject sender)
		{
		}

		public virtual void Paste (Foundation.NSObject sender)
		{
		}

		public virtual void Pause (Foundation.NSObject sender)
		{
		}

		public virtual void Play (Foundation.NSObject sender)
		{
		}

		public virtual void Replace (Foundation.NSObject sender)
		{
		}

		public virtual void SelectAll (Foundation.NSObject sender)
		{
		}

		public virtual void SelectNone (Foundation.NSObject sender)
		{
		}

		public virtual void SetShowsResizeIndicator (System.Boolean show)
		{
		}

		public virtual void StepBackward (Foundation.NSObject sender)
		{
		}

		public virtual void StepForward (Foundation.NSObject sender)
		{
		}

		public virtual void Trim (Foundation.NSObject sender)
		{
		}

		protected override void Dispose (System.Boolean disposing)
		{
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.Boolean BackButtonVisible { get; set; }

		public virtual System.Single ControllerBarHeight { get; }

		public virtual System.Boolean CustomButtonVisible { get; set; }

		public QTKit.IQTMovieViewDelegate Delegate { get; set; }

		public virtual System.Boolean Editable { get; set; }

		public virtual AppKit.NSColor FillColor { get; set; }

		public virtual System.Boolean HotSpotButtonVisible { get; set; }

		public virtual System.Boolean IsControllerVisible { get; set; }

		public virtual QTKit.QTMovie Movie { get; set; }

		public virtual CoreGraphics.CGRect MovieBounds { get; }

		public virtual CoreGraphics.CGRect MovieControllerBounds { get; }

		public virtual System.Boolean PreservesAspectRatio { get; set; }

		public virtual System.Boolean SetStepButtonsVisible { get; set; }

		public virtual System.Boolean TranslateButtonVisible { get; set; }

		public virtual System.Boolean VolumeButtonVisible { get; set; }

		public virtual Foundation.NSObject WeakDelegate { get; set; }

		public virtual System.Boolean ZoomButtonsVisible { get; set; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public interface IQTMovieViewDelegate : ObjCRuntime.INativeObject, System.IDisposable {
	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public static class QTMovieViewDelegate_Extensions : System.Object {
		static public CoreImage.CIImage ViewWillDisplayImage (this QTKit.IQTMovieViewDelegate This, QTKit.QTMovieView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTMovieViewDelegate : Foundation.NSObject, QTKit.IQTMovieViewDelegate, ObjCRuntime.INativeObject, System.IDisposable {
		public QTMovieViewDelegate ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected QTMovieViewDelegate (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTMovieViewDelegate (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual CoreImage.CIImage ViewWillDisplayImage (QTKit.QTMovieView view, CoreImage.CIImage image)
		{
			return default (CoreImage.CIImage);
		}

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public class QTSampleBuffer : Foundation.NSObject {
		protected QTSampleBuffer (Foundation.NSObjectFlag t)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		protected internal QTSampleBuffer (System.IntPtr handle)
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public virtual void DecrementSampleUseCount ()
		{
		}

		public virtual Foundation.NSObject GetAttribute (System.String key)
		{
			return default (Foundation.NSObject);
		}

		public virtual void IncrementSampleUseCount ()
		{
		}

		internal QTSampleBuffer ()
		{
			throw new System.NotImplementedException (ObjCRuntime.Constants.MacOS32bitsUnavailable);
		}

		public override System.IntPtr ClassHandle { get; }

		public virtual System.IntPtr BytesForAllSamples { get; }

		public virtual QTKit.QTTime DecodeTime { get; }

		public virtual QTKit.QTTime Duration { get; }

		public virtual QTKit.QTFormatDescription FormatDescription { get; }

		public virtual System.nuint LengthForAllSamples { get; }

		public virtual QTKit.QTTime PresentationTime { get; }

		public virtual Foundation.NSDictionary SampleBufferAttributes { get; }

		public virtual System.nint SampleCount { get; }

		public virtual System.nint SampleUseCount { get; }

	}

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public delegate System.Boolean QTCaptureFileError (QTKit.QTCaptureFileOutput captureOutput, Foundation.NSUrl outputFileURL, QTKit.QTCaptureConnection[] connections, Foundation.NSError reason);

	[ObjCRuntime.Obsoleted (ObjCRuntime.PlatformName.MacOSX, 10,15, message: ObjCRuntime.Constants.MacOS32bitsUnavailable)]
	public delegate CoreImage.CIImage QTCaptureImageEvent (QTKit.QTCaptureView view, CoreImage.CIImage image);

}

#endif
