# Job that will download the other artifact from the tests job and will publish them in the 
# vsdrops

###########################################################
# WARNING WARNING WARNING WARNING WARNING WARNING WARNING #
###########################################################

# This job is executed on WINDOWS! make sure you DO NOT USE
# bash or linux file paths on scripts. Another important
# details is that System.DefaultWorkingDirectory
# on mac os x points on the top dir while on windows 
# is the checked out dir

parameters:

- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

- name: vsdropsPrefix
  type: string

- name: testPrefix
  type: string 
  default: 'ios' # default context, since we started dealing with iOS devices. 

- name: provisioningFailed
  type: string 
  default: 'False'

- name: simTestsConfigurations
  type: object

- name: isPR
  type: boolean

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}

- template: download-artifacts.yml
  parameters:
    downloadHtmlReport: false
    simTestsConfigurations: ${{ parameters.simTestsConfigurations }}
    testPrefix: ${{ parameters.testPrefix }}

# build a message with all the content of all tests, to do so, we get the labels and to pass them to pwsh we do a join with ;
# as the separator
- pwsh: |
    $vsdropsIndex="$Env:VSDROPSPREFIX/$Env:BUILD_BUILDNUMBER/$Env:BUILD_BUILDID/"
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1
    $DebugPreference = "Continue" # enable debug messages

    $labels = "$Env:LABELS".Split(";")
    $testResults = [System.Collections.ArrayList]@()
    foreach ($label in $labels) {
      $label = $label.Replace("-", "_")
      $status = Get-Item "Env:TESTS_JOBSTATUS_$($label.ToUpper())"
      $testSummaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY\Reports\TestSummary-${{ parameters.testPrefix }}$label\TestSummary.md"

      Write-Host "Test results for $label $($status.Value)"
      Write-Host "Test summary path for $label $($testSummaryPath)"
      if (-not (Test-Path -Path $testSummaryPath -PathType Leaf)) {
        Write-Host "WARNING: Path is not present."
      }

      $result = New-TestResults -Path $testSummaryPath -Status $status.Value -Label $label -Context "$Env:CONTEXT - $label"
      $testResults.Add($result)
    }

    $parallelResults = New-ParallelTestsResults -Results $testResults -Context "$Env:CONTEXT" -TestPrefix "${{ parameters.testPrefix }}" -VSDropsIndex $vsdropsIndex
    $success = $parallelResults.IsSuccess()
    $emoji = ":rocket:"
    if (-not $success) {
      Set-PipelineResult -Status partiallySucceeded
      $emoji = ":fire:"
    }

    $gihubComments = New-GitHubCommentsObject -Org "xamarin" -Repo "xamarin-macios" -Token $Env:GITHUB_TOKEN -Hash $Env:GIT_HASH -Debug
    $result = $gihubComments.NewCommentFromObject("Test results", $emoji, $parallelResults)
  env:
    LABELS: ${{ join(';', parameters.simTestsConfigurations) }}
    BUILD_REVISION: $(Build.SourceVersion)
    CONTEXT: ${{ parameters.statusContext }}
    DEVICE_PREFIX: ${{ parameters.testPrefix }}
    GITHUB_TOKEN: $(GitHub.Token)
    TESTS_JOBSTATUS: $(TESTS_JOBSTATUS) # set by the runTests step
    TESTS_SUMMARY: $(TEST_SUMMARY_PATH)
    ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Add summaries'
  condition: always()
  timeoutInMinutes: 15
