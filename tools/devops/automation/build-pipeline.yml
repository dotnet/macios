# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13760&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/dev/bond/keychain                      # UNDONE: Change back to main once keychain diagnostics change has been merged (or not)
    endpoint: xamarin

  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

  - repository: release-scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized 
    endpoint: xamarin

variables:
- group: xamops-azdev-secrets
- group: Xamarin-Secrets
- group: Xamarin Signing
- group: Xamarin Release
- group: Xamarin Notarization
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: system.debug
  value: true
- name: SigningKeychain
  value: "builder.keychain"
- name: OSX_KEYCHAIN_PASS                                     # UNDONE: Override the OSX_KEYCHAIN_PASS to use same password as used by the iOS mac pool machines
  value: $(ios-pool-keychain-password)

trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*

stages:
- stage: build_packages
  displayName: 'Build'
  jobs:
  - job: build
    displayName: 'Build packages'
    timeoutInMinutes: 1000
    pool:
      name: VSEng-Xamarin-RedmondMacCatalinaBuildPool-iOS-Untrusted
      demands:
      - Agent.OS -equals Darwin
      - Agent.OSVersion -equals 10.15
    workspace:
      clean: all

    steps:
    - template: templates/build-packages.yml

  - job: upload_azure_blob
    displayName: 'Upload packages to Azure'
    timeoutInMinutes: 1000
    dependsOn: build # can start as soon as the tests are done
    condition: succeeded()

    variables:
      Parameters.outputStorageUri: ''

    pool:
      name: VSEngDeploymentPool
      demands: agent.os -equals Windows_NT # we need to use a windows machine since vsdrops just works on them and the pool might have diff OS in the agents
      workspace:
        clean: all
    steps:
    - template: templates/upload-azure.yml

- stage: tests
  displayName : 'Tests'
  dependsOn: build_packages
  jobs:

  # this are the default tests that are executed in the latests mac OS X on the simulators
  - job: simulator_tests
    displayName: 'Simulator tests'
    timeoutInMinutes: 1000
    pool:
      name: VSEng-Xamarin-RedmondMacCatalinaBuildPool-iOS-Untrusted
      demands:
      - Agent.OS -equals Darwin
      - Agent.OSVersion -equals 10.15
    workspace:
      clean: all

    steps:
    - bash: echo "Hello world"

  # ideally we would use a matrix here, like:

  #  - job: device_tests
  #    displayName: 'Device tests'
  #    timeoutInMinutes: 1000
  #
  #    strategy:
  #      matrix:
  #        iOS32: # TODO: This bots should be moved to the ddfun pool
  #          deviceDemands: 'xismoke-32'
  #          testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-QA'
  #        iOS64:
  #          deviceDemands: 'ios'
  #          testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #        tvOS:
  #          deviceDemands: 'tvos'
  #          testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #
  #    pool:
  #      name: $(poolName)
  #      demands: $(deviceDemands)
  #      workspace:
  #        clean: all
  #
  #    steps:
  #    - template: templates/device-tests.yml
  #
  # Unfortunally, variable expansion will not happen on the right time, and will result in an agent error, to fix that
  # we use a template for the test and we set each of the jobs. Not ideal, but is only a 3 jobs matrix

  - job: ios32_device_tests
    displayName: 'iOS32b Device tests'
    timeoutInMinutes: 1000

    pool:
      name: 'VSEng-Xamarin-QA'
      demands: 'xismoke-32'
      workspace:
        clean: all

    steps:
    - template: templates/device-tests.yml

  - job: ios64_device_tests
    displayName: 'iOS Device tests'
    timeoutInMinutes: 1000

    pool:
      name: 'VSEng-Xamarin-Mac-Devices'
      demands: 'ios'
      workspace:
        clean: all

    steps:
    - template: templates/device-tests.yml

  - job: tvos_device_tests
    displayName: 'tvOS Device tests'
    timeoutInMinutes: 1000

    pool:
      name: 'VSEng-Xamarin-Mac-Devices'
      demands: 'tvos'
      workspace:
        clean: all

    steps:
    - template: templates/device-tests.yml

  # This job is a matrix and will execute the tests on the available tests, since the pools
  # are diff, and the expansion does work with the poolname, we can use a matrix
  # * mac OS 10.14
  # * mac OX 10.13
  - job: mac_tests
    displayName: 'Mac OS X tests'
    timeoutInMinutes: 1000
    workspace:
      clean: all

    strategy:
      matrix:
        Mojave:
          poolName: 'Hosted Mac Internal Mojave'
        HighSierra:
          poolName: 'Hosted Mac Internal'

    pool:
      name: $(poolName)
      demands: 
      - Agent.OS -equals Darwin

      workspace:
        clean: all

    steps:
    - bash: echo "Hello world"
