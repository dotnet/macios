parameters:

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- task: DownloadPipelineArtifact@2
  displayName: Download artifacts
  inputs:
    artifactName: not-signed-package
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/not-signed-package

- pwsh: |
    $downloadPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "not-signed-package"
    $destinationPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "APIScan"
    New-Item -ItemType Directory -Force -Path $destinationPath
    # remove all the files that do not match the platform
    $files = Get-ChildItem -Path $downloadPath -Recurse
    $filter = "*$($Env:PLATFORM)*nupkg"
    Write-Host "Filter to use is $filter"

    foreach ($f in $files) {
      if (-not ($f.Name -like $filter)) {
        Write-Host "Removing file $($f.Name) from $downloadPath"
        Remove-Item -Path $f.FullName
      } else {
        Write-Host "Expanding file $($f.Name) to $destinationPath"
        Expand-Archive -Path $f.FullName -DestinationPath $destinationPath -Force
      }
    }
    Write-Output "Performing APISCan for $(PLATFORM) $(VERSION) using tenant $(TENANT) client id $(CLIENT_ID) and secret $(SECRET)."
  displayName: "Expand nugets"
  env:
    PLATFORM: $(PLATFORM)

- task: APIScan@2
  displayName: Run APIScan
  inputs:
    softwareFolder: $(Build.SourcesDirectory)/APIScan
    softwareName: "Microsoft.$(PLATFORM)"
    softwareVersionNum: $(VERSION)
    isLargeApp: false
    toolVersion: 'Latest'
  env:
    AzureServicesAuthConnectionString: runAs=App;AppId=$(CLIENT_ID);TenantId=$(TENANT);AppKey=$(SECRET)
