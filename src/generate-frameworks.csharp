#!/usr/bin/env /Library/Frameworks/Mono.framework/Commands/csharp -s

try {
	var args = Environment.GetCommandLineArgs ();
	var defaultArgumentCount = 3;
	var actualArgumentCount = 4;
	if (args.Length != defaultArgumentCount + actualArgumentCount) {
		Console.WriteLine ($"Need {actualArgumentCount} arguments, got {args.Length - defaultArgumentCount} arguments");
		Environment.Exit (1);
		return;
	}

	args = args.Skip (3).ToArray ();

	var iosframeworks = args [0].Split (new char [] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
	var macosframeworks = args [1].Split (new char [] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
	var watchosframeworks = args [2].Split (new char [] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
	var tvosframeworks = args [3].Split (new char [] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
	var allframeworks = new string [] [] { iosframeworks, macosframeworks, watchosframeworks, tvosframeworks };
	var names = new string [] { "iosframeworks", "macosframeworks", "watchosframeworks", "tvosframeworks" };

	var all = new HashSet<string> ();
	foreach (var fws in allframeworks)
		foreach (var fw in fws)
			all.Add (fw)

	Console.WriteLine ("using System.Collections.Generic;");
	Console.WriteLine ();
	Console.WriteLine ("partial class Frameworks {");

	for (int i = 0; i < names.Length; i++) {
		var name = names [i];
		var frameworks = allframeworks [i];
		Console.Write ($"\treadonly HashSet<string> {name} = new HashSet<string> {{\"");
		Console.Write (string.Join ("\", \"", frameworks));
		Console.WriteLine ("\"};");
	}

	var allArray = all.ToArray ();
	Array.Sort (allArray);
	foreach (var fw in allArray)
		Console.WriteLine ($"\tbool? _{fw.Replace (".", "")};");
	foreach (var fw in allArray)
		Console.WriteLine ($"\tpublic bool Have{fw} {{ get {{ if (!_{fw}.HasValue) _{fw} = GetValue (\"{fw}\"); return _{fw}.Value; }} }}");
	Console.WriteLine ("}");
	Environment.Exit (0);
} catch (Exception e) {
	Console.WriteLine ("Failed: {0}", e);
	Environment.Exit (1);
}
