parameters:

- name: macPool
  type: string
  default: "VSEng-VSMac-Xamarin-Shared"

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

steps:
- template:  sdk-unified/steps/checkout/v1.yml@yaml-templates
  parameters:
    resource: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}
    clean: true
    path: s/xamarin-macios

- checkout: maccore
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- bash: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/disable-codeql-arm64.sh
  displayName: 'Disable CodeQL on arm64'
  name: disableCodeQLOnArm64

- pwsh: |
    $macip=$(ipconfig getifaddr en0)
    echo "##vso[task.setvariable variable=AGENT_NAME;isOutput=true]$(Agent.Name)"
    echo "##vso[task.setvariable variable=AGENT_POOL;isOutput=true]${{ parameters.macPool }}"
    echo "##vso[task.setvariable variable=AGENT_IP;isOutput=true]$macip"
    echo "##vso[task.setvariable variable=AGENT_SYSTEM_DEFAULTWORKINGDIRECTORY;isOutput=true]$Env:SYSTEM_DEFAULTWORKINGDIRECTORY"
    echo "##vso[task.setvariable variable=AGENT_BUILD_SOURCESDIRECTORY;isOutput=true]$Env:BUILD_SOURCESDIRECTORY"
  name: macInfo
  displayName: Set agent information

- bash: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/clean-for-remote-tests.sh
  displayName: 'Clean for remote tests'
  continueOnError: true

- bash: ./install-qa-provisioning-profiles.sh -v
  displayName: 'Add build provisioning profiles'
  timeoutInMinutes: 30
  continueOnError: true # should not stop the build
  workingDirectory: $(Build.SourcesDirectory)/maccore/tools
  env:
    AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
    AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
    AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}

- template: azure-tools/az-client-update.yml@templates    # AzureCLI step below requires that AzClient 2.x is installed on the agent
  parameters:
    platform: 'All'       # Update Az tools for both Windows and Mac agents
    version: '2.62.0'

# https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-security-configuration/configuration-guides/pat-burndown-guidance#authentication-from-pipelines
# Requires Azure client 2.x
- task: AzureCLI@2
  displayName: 'AzDO.BearerToken based on service connection'
  enabled: true
  inputs:
    azureSubscription: 'DevDiv - SharedUntrustedAgentPool-Manage'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # if this fails, check out this bash script that includes diagnostics:
      # https://gist.github.com/johnterickson/19f80a3e969e39f1000d118739176e62

      # Note that the resource is specified to limit the token to Azure DevOps
      $token = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv

      Write-Host "Setting AzDO.BearerToken"
      Write-Host "##vso[task.setvariable variable=AzDO.BearerToken;issecret=true]${token}"

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\MaciosCI.psd1

    New-Item -Path "$($Env:HOME)" -Name "remote_build_testing" -Force -ItemType "directory"
    New-Item -Path "$($Env:HOME)/remote_build_testing" -Name "BuildId.txt" -ItemType "file" -Force -Value "$($Env:BUILD_BUILDID)"

    $azdoBearerToken = "$(AzDO.BearerToken)"
    $azdoBearerTokenHint = $azdoBearerToken.Substring(0, 8)
    Write-Host "AzDO.BearerToken (hint): ${azdoBearerTokenHint}"

    $vsts = New-VSTS -Org "devdiv" -Project "DevDiv" -Token $azdoBearerToken

    # get the pool and the agent objects and disable the bot
    $pool = $vsts.Pools.GetPool("${{ parameters.macPool }}")
    $agent = $vsts.Agents.GetAgent($pool, "$(Agent.Name)")
    $vsts.Agents.SetEnabled($pool, $agent, $False)
  displayName: "Disable macOS bot from pool"

- bash: make -C $(Build.SourcesDirectory)/xamarin-macios/tools/devops provision-xcode.csx
  displayName: 'Generate Xcode provisioning csx file'

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision Xcode'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-macios/tools/devops/provision-xcode.csx
    provisioning_extra_args: '-vvvv'
    github_token: ${{ parameters.gitHubToken }}
  timeoutInMinutes: 250

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Xamarin - SDK Engineering - macios-team-pair-to-mac-ci'
    KeyVaultName: 'xamarin-ios-vault'
    SecretsFilter: 'RemoteMacIdRsaPub'
  displayName: 'Download id_rsa.pub'

- bash: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/authorize-id-rsa-pub.sh "$(RemoteMacIdRsaPub)"
  displayName: "Autorize id_rsa.pub"
  continueOnError: true

- ${{ if or(contains(variables['Build.Reason'], 'ResourceTrigger'), contains(variables['Build.Reason'], 'BuildCompletion'), contains(variables['Build.DefinitionName'], 'xamarin-macios-ci-tests'), contains(variables['Build.DefinitionName'], 'xamarin-macios-pr-tests')) }}:

  - download: macios
    displayName: Download Build.props
    artifact: Build.props

  - download: macios
    displayName: Download package-test-libraries
    artifact: package-test-libraries

  - download: macios
    displayName: Download build-configuration
    artifact: build-configuration

  - download: macios
    displayName: Download not-signed-package
    artifact: not-signed-package

  - download: macios
    displayName: Download WorkloadRollback.json
    artifact: WorkloadRollback

  - pwsh: |
      Get-ChildItem -Path "$(Pipeline.Workspace)/macios" -Recurse -Force
    displayName: 'Display downloads'
    timeoutInMinutes: 5

  # the default location when downloading is $(Pipeline.Workspace)/<pipeline resource identifier>/<artifact name>
  - bash: |
      source="$PIPELINE_WORKSPACE/macios"
      destination="$BUILD_SOURCESDIRECTORY/artifacts"
      # move all the files from the source to the destination
      mv -fv "$source" "$destination"
    displayName: Move artifacts to the expected location

- ${{ else }}:
  - task: DownloadPipelineArtifact@2
    displayName: Download artifacts
    inputs:
      allowFailedBuilds: true
      path: $(Build.SourcesDirectory)/artifacts

- bash: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/bash/install-workloads.sh
  workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-macios
  displayName: 'Install .NET + workloads'
  timeoutInMinutes: 45
  env:
    MACIOS_UPLOAD_PREFIX: ${{ parameters.uploadPrefix }}

- bash: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/prepare-for-remote-tests.sh
  displayName: 'Prepare for remote tests'
  continueOnError: true
