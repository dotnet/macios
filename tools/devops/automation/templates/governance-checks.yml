steps:

- checkout: self
- checkout: maccore
  persistCredentials: true  # hugely important, else there are some scripts that check a single file from maccore that will fail

- task: CredScan@3
  displayName: "Run CredScan"
  inputs:
    suppressionsFile: '$(System.DefaultWorkingDirectory)/maccore/tools/devops/CredScanSuppressions.json'
  
- powershell: |
    Write-Host 'Source dir $(Build.SourcesDirectory)'
    Write-Host 'Working dir $System.DefaultWorkingDirectory)'

    Dir $(Build.SourcesDirectory)
    Dir $(System.DefaultWorkingDirectory)
  displayName: Dump enviroment

- powershell: |
    gci env: | format-table -autosize -wrap
  displayName: 'Dump Environment'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- task: PoliCheck@1
  inputs:
    inputType: 'Basic'
    targetType: 'F'
    targetArgument: '$(Build.SourcesDirectory)'
    result: 'PoliCheck.xml'
    optionsUEPATH: '$(System.DefaultWorkingDirectory)/maccore/tools/devops/PoliCheckExclusions.xml'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
  displayName: 'Post Analysis'
  inputs:
    CredScan: true
    PoliCheck: true

- task: WhiteSource Bolt@20
  displayName: "WhiteSource Bolt analysis"
  inputs:
    cwd: $(System.DefaultWorkingDirectory)

- powershell: echo "##vso[task.setvariable variable=CHECKS_FAILED]True"
  condition: failed() # we failed running the tests, therefore stop the pipeline

- powershell: |
    Import-Module "$(System.DefaultWorkingDirectory)\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1"
    Import-Module "$(System.DefaultWorkingDirectory)\xamarin-macios\tools\devops\automation\scripts\VSTS.psm1"
    $context = "Governance"

    Write-Host "Checks failed: '$Env:CHECKS_FAILED'"
    if ($Env:CHECKS_FAILED -eq "True") {
        Set-GitHubStatus -Status "error" -Description "Governance checks failed" -Context "$context"
    } else {
        Set-GitHubStatus -Status "success" -Description "Governance checks passed" -Context "$context"
    }
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: "Set Github status"
  condition: succeededOrFailed()
