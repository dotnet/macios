parameters:
# name of the pool that contains the iOS devices
- name: macPool
  type: string

- name: useImage
  type: boolean
  default: false

- name: stageName
  type: string

- name: displayName
  type: string

- name: statusContext
  type: string
  default: '10.16'

- name: keyringPass
  type: string

- name: demands
  type: object
  default: []

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: postPipeline
  type: boolean
  default: false

stages:
- stage: configure_build
  displayName: '${{ parameters.stageDisplayNamePrefix }}Configure'
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if and(ne(parameters.dependsOn, ''), ne(parameters.dependsOnResult, '')) }}:
    condition: eq(dependencies.${{ parameters.dependsOn }}.result, '${{ parameters.dependsOnResult }}')
  jobs:
  
  - ${{ if eq(parameters.pool, 'automatic') }}:
    - job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
      pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
        vmImage: ubuntu-latest
      steps:
      - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

      # Selects appropriate agent pool based on trigger type (PR or CI); manually triggered builds target the PR pool
      - template: azure-devops-pools/agent-pool-selector.yml@yaml-templates
        parameters:
          agentPoolPR: $(PRBuildPool)
          agentPoolPRUrl: $(PRBuildPoolUrl)
          agentPoolCI: $(CIBuildPool)
          agentPoolCIUrl: $(CIBuildPoolUrl)

  - job: configure
    displayName: 'Configure build'
    pool:
      vmImage: windows-latest

    variables:
      isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
      isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
      BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

    steps:
    - template: common/load_configuration.yml
      parameters: 
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        testConfigurations: ${{ parameters.testConfigurations }}
        supportedPlatforms: ${{ parameters.supportedPlatforms }}
        testsLabels: '--label=skip-all-tests,run-ios-tests,run-ios-simulator-tests,run-tvos-tests,run-watchos-tests,run-mac-tests,run-maccatalyst-tests,run-dotnet-tests,run-system-permission-tests,run-legacy-xamarin-tests'
        statusContext: 'VSTS: simulator tests' 
        uploadArtifacts: true

- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  dependsOn:
  - ${{ if eq(parameters.postPipeline, false) }}:
    - build_macos_tests
  - configure_build
  condition: and(succeeded(), eq(stageDependencies.configure_build.outputs['configure.decisions.RUN_MAC_TESTS'], 'true'))
  variables:
    GITHUB_FAILURE_COMMENT_FILE: $(System.DefaultWorkingDirectory)/github-comment-file.md

  jobs:
  - job: run_tests
    displayName: 'macOS tests'
    timeoutInMinutes: 120
    workspace:
      clean: all

    pool:
      ${{ if eq(parameters.useImage, false) }}:
        name: ${{ parameters.macPool }}
        demands: ${{ parameters.demands }}
      ${{ else }}:
        vmImage: ${{ parameters.macPool }}

    variables:
      PR_ID: $[ stageDependencies.configure_build.configure.outputs['labels.pr_number'] ]

    steps:
    - template: build.yml
      parameters:
        isPR: ${{ parameters.isPR }}
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        statusContext: ${{ parameters.statusContext }}
        keyringPass: ${{ parameters.keyringPass }} 
