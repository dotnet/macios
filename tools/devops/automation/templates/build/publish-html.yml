
# Job that will download the other artifact from the tests job and will publish them in the 
# vsdrops

###########################################################
# WARNING WARNING WARNING WARNING WARNING WARNING WARNING #
###########################################################

# This job is executed on WINDOWS! make sure you DO NOT USE
# bash or linux file paths on scripts. Another important
# details is that System.DefaultWorkingDirectory
# on mac os x points on the top dir while on windows 
# is the checked out dir

parameters:

- name: statusContext
  type: string 
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices. 

- name: vsdropsPrefix
  type: string

- name: devicePrefix
  type: string 
  default: 'ios' # default context, since we started dealing with iOS devices. 

- name: runTests
  type: boolean
  default: true

steps:

- checkout: self
  persistCredentials: true
  path: s/xamarin-macios

- template: download-artifacts.yml 
  parameters:
    runTests: ${{ parameters.runTests }}

- ${{ if eq(parameters.runTests, true) }}:
  - pwsh: |
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1

      $apiDiffRoot = "$Env:STABLE_APIDDIFF_PATH"
      $filePatterns = @{
        "iOS" = "^ios-[0-9\-]*\.md$";
        "macOS" = "^macos-[0-9\-]*\.md$";
        "macCat" = "^maccat-[0-9\-]*\.md$";
        "macCatiOS" = "^maccat-to-ios\.md$";
        "tvOS" = "^tvos-[0-9\-]*\.md$";
        "watchOS" = "^watchos-[0-9\-]*\.md$";
        "dotnet-iOS" = "^dotnet-ios-[a-zA-Z0-9\-]*\.md$";
        "dotnet-tvOS" = "^dotnet-tvos-[a-zA-Z0-9\-]*\.md$";
        "dotnet-MacCatalyst" = "^dotnet-maccatalyst-[a-zA-Z0-9\-]*\.md$";
        "dotnet-macOS" = "^dotnet-macos-[a-zA-Z0-9\-]*\.md$";
        "dotnet-legacy-iOS" = "^dotnet-legacy-ios-[a-zA-Z0-9\-]*\.md$";
        "dotnet-legacy-tvOS" = "^dotnet-legacy-tvos-[a-zA-Z0-9\-]*\.md$";
        "dotnet-legacy-MacCatalyst" = "^dotnet-legacy-maccatalyst-[a-zA-Z0-9\-]*\.md$";
        "dotnet-legacy-macOS" = "^dotnet-legacy-macos-[a-zA-Z0-9\-]*\.md$";
        "dotnet-macCatiOS" = "^dotnet-maccatios-[a-zA-Z0-9\-]*\.md$";
      }

      [System.Collections.Generic.List[System.Object]]$gistsObj = @()
      $gists = @{}

      foreach ($key in $filePatterns.Keys) {
        $filter = $filePatterns[$key]
        $fileName = Get-ChildItem $apiDiffRoot -Name | Where-Object{$_ -match $filter}  
        if ($fileName) {
          $obj = New-GistObjectDefinition -Name $fileName -Path "$apiDiffRoot\$fileName" -Type "markdown"
          $gistsObj.Add($obj)
          # create a gist just for this file 
          $url = New-GistWithFiles -Description "$key API diff from stable" -Files @($obj)
          Write-Host "New gist created at $url"
          $gists[$key] = $url
        }
      }

      # create a gist with all diffs
      $url = New-GistWithFiles -Description "API diff from stable (all platforms)" -Files $gistsObj 
      $gists["index"] = $url

      # similar dict but for the html links from vsdrops
      $apiDiffRoot="$Env:VSDROPSPREFIX/$Env:BUILD_BUILDNUMBER/$Env:BUILD_BUILDID/apidiff/;/"
      $html =  @{
        "iOS" = $apiDiffRoot + "ios-api-diff.html"; 
        "macOS" = $apiDiffRoot + "mac-api-diff.html";
        "macCat" = $apiDiffRoot + "maccat-api-diff.html";
        "tvOS" = $apiDiffRoot + "tvos-api-diff.html";
        "watchOS" =$apiDiffRoot + "watchos-api-diff.html";
        "index"= $apiDiffRoot + "api-diff.html";
        "dotnet-iOS" = $apiDiffRoot + "dotnet/Microsoft.iOS.Ref/ref/net6.0/Xamarin.iOS-api-diff.html";
        "dotnet-tvOS" = $apiDiffRoot + "dotnet/Microsoft.tvOS.Ref/ref/net6.0/Xamarin.TVOS-api-diff.html";
        "dotnet-MacCatalyst" = $apiDiffRoot + "dotnet/Microsoft.MacCatalyst.Ref/ref/net6.0/Xamarin.MacCatalyst-api-diff.html";
        "dotnet-macOS" = $apiDiffRoot + "dotnet/Microsoft.macOS.Ref/ref/net6.0/Xamarin.Mac-api-diff.html";
        "dotnet-legacy-iOS" = $apiDiffRoot + "dotnet/legacy-diff/Microsoft.iOS.Ref/ref/net6.0/Xamarin.iOS-api-diff.html";
        "dotnet-legacy-tvOS" = $apiDiffRoot + "dotnet/legacy-diff/Microsoft.tvOS.Ref/ref/net6.0/Xamarin.TVOS-api-diff.html";
        "dotnet-legacy-MacCatalyst" = $apiDiffRoot + "dotnet/legacy-diff/Microsoft.MacCatalyst.Ref/ref/net6.0/Xamarin.MacCatalyst-api-diff.html";
        "dotnet-legacy-macOS" = $apiDiffRoot + "dotnet/legacy-diff/Microsoft.macOS.Ref/ref/net6.0/Xamarin.Mac-api-diff.html";
        "dotnet-macCatiOS" = $apiDiffRoot + "dotnet/iOS-MacCatalyst-diff/Microsoft.iOS.Ref/ref/net6.0/Xamarin.iOS.MacCatalyst-api-diff.html";
      }

      # build a json object that will be used by the comment to write the data for users
      $apiDiffData = @{
        "gist" = $gists;
        "html" = $html;
        "result" = $Env:APIDIFF_BUILT;
        "message" = $Env:APIDIFF_MESSAGE;
      }
      # write to a file to be used by the comment to parse
      $path = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY\apidiff.json"
      $apiDiffData | ConvertTo-Json | Out-File $path
      $apiDiffData | ConvertTo-Json | Write-Host
      Write-Host "##vso[task.setvariable variable=APIDIFF_JSON_PATH]$path"
    displayName: 'Create API from stable diff gists'
    timeoutInMinutes: 1
    env:
      GITHUB_TOKEN: $(GitHub.Token)

  - powershell: |
      $env:VSDROPS_INDEX="$Env:VSDROPSPREFIX/$Env:BUILD_BUILDNUMBER/$Env:BUILD_BUILDID/$Env:DEVICE_PREFIX/;/tests/vsdrops_index.html"
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1 
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\VSTS.psm1 

      $buildReason = "$(Build.Reason)"
      $buildSourceBranchName = "$(Build.SourceBranchName)"
      if ($Env:STABLE_APID_GENERATOR_DIFF_PATH) {
        $apiGeneratorComment= Join-Path -Path "$Env:STABLE_APID_GENERATOR_DIFF_PATH" -ChildPath "api-diff-comments.md"
      } else {
        $apiGeneratorComment = ""
      }

      if (-not (Test-Path "$Env:TESTS_SUMMARY" -PathType Leaf)) {
        $summaryDirectory = Split-Path -Path "$Env:TESTS_SUMMARY"
        New-Item -Path $summaryDirectory -ItemType directory
        Add-Content -Path "$Env:TESTS_SUMMARY" -Value "No test summary was found (something probably failed before the tests could execute)"
      }

      if ($buildReason -ne "PullRequest" -or $Env:BUILD_PACKAGE -eq "True") {
        Write-Host "Json path is $Env:ARTIFACTS_JSON_PATH"
        $response = New-GitHubSummaryComment -Context "$Env:CONTEXT" -TestSummaryPath "$Env:TESTS_SUMMARY" -Artifacts "$Env:ARTIFACTS_JSON_PATH" -APIDiff "$Env:APIDIFF_JSON_PATH" -APIGeneratorDiff $apiGeneratorComment
        Write-Host $response
      } else {
        Write-Host "Json path is $Env:ARTIFACTS_JSON_PATH"
        $response = New-GitHubSummaryComment -Context "$Env:CONTEXT" -TestSummaryPath "$Env:TESTS_SUMMARY" -APIDiff "$Env:APIDIFF_JSON_PATH" -APIGeneratorDiff $apiGeneratorComment
        Write-Host $response
      }
    env:
      BUILD_REVISION: $(Build.SourceVersion)
      CONTEXT: ${{ parameters.statusContext }}
      DEVICE_PREFIX: ${{ parameters.devicePrefix }}
      GITHUB_TOKEN: $(GitHub.Token)
      TESTS_JOBSTATUS: $(TESTS_JOBSTATUS) # set by the runTests step
      TESTS_SUMMARY: $(TEST_SUMMARY_PATH)
      ACCESSTOKEN: $(System.AccessToken)
    displayName: 'Add summaries'
    condition: always()
    timeoutInMinutes: 1

- ${{ if ne(parameters.runTests, true) }}:
  - powershell: |
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\GitHub.psm1 
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\xamarin-macios\tools\devops\automation\scripts\VSTS.psm1 
      $targetUrl = $Env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI + "$Env:SYSTEM_TEAMPROJECT/_build/index?buildId=$Env:BUILD_BUILDID&view=ms.vss-test-web.test-result-details"

      $response = New-GitHubComment -Header "Tests were not ran ($Env:CONTEXT)." -Emoji ":warning:" -Description "Results were skipped for this run [Azure Devops]($targetUrl)."
    env:
      BUILD_REVISION: $(Build.SourceVersion)
      CONTEXT: ${{ parameters.statusContext }}
      GITHUB_TOKEN: $(GitHub.Token)
      ACCESSTOKEN: $(System.AccessToken)
    displayName: 'Add summaries'
    condition: always()
    timeoutInMinutes: 1
