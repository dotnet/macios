# Provides all the steps to sign and notarize pks and msi
parameters:

- name: signatureType
  type: string
  default: 'Real'

steps:

- bash: |
    set -x
    set -e

    # output vars for other steps to use and not need to recomputed the paths
    IOS_PKG=$(find $(Build.SourcesDirectory)/package -type f -name "xamarin.ios-*" | xargs basename)
    if [ -z "$IOS_PKG" ]; then
      echo "Xamarin.iOS package not found."
    else
      IOS_PKG="$(Build.SourcesDirectory)/package/$IOS_PKG"
      echo "##vso[task.setvariable variable=IOS_PKG;]$IOS_PKG"
      echo "Xamarin.iOS package found at $IOS_PKG"
    fi

    MAC_PKG=$(find $(Build.SourcesDirectory)/package -type f -name "xamarin.mac-*" | xargs basename)
    if [ -z "$MAC_PKG" ]; then
      echo "Xamarin.Mac package not found."
    else
      MAC_PKG="$(Build.SourcesDirectory)/package/$MAC_PKG"
      echo "##vso[task.setvariable variable=MAC_PKG;]$MAC_PKG"
      echo "Xamarin.Mac package found at $MAC_PKG"
    fi
  displayName: 'Retrieve packages to sign'
  condition: and(succeeded(), contains(variables['configuration.BuildPkgs'], 'True'))
  timeoutInMinutes: 180

- task: MicroBuildSigningPlugin@3
  displayName: 'Install Signing Plugin'
  inputs:
    signType: '${{ parameters.signatureType }}'
    azureSubscription: 'MicroBuild Signing Task (DevDiv)'
    zipSources: false  # we do not use the feature and makes the installation to last 10/12 mins instead of < 1 min
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- pwsh : |
    # Get the list of files to sign
    $msiFiles = Get-ChildItem -Path $(Build.SourcesDirectory)/package/ -Filter "*.msi"

    # Add those files to an array
    $SignFiles = @()
    foreach($msi in $msiFiles) {
        Write-Host "$($msi.FullName)"
        $SignFiles += @{ "SrcPath"="$($msi.FullName)"}
    }

    Write-Host "$msiFiles"

    # array of dicts
    $SignFileRecord = @(
      @{
        "Certs" = "400";
        "SignFileList" = $SignFiles;
      }
    )

    $SignFileList = @{
        "SignFileRecordList" = $SignFileRecord
    }

    # Write the json to a file
    ConvertTo-Json -InputObject $SignFileList -Depth 5 | Out-File -FilePath $(Build.ArtifactStagingDirectory)/MsiFiles2Notarize.json -Force
    dotnet $Env:MBSIGN_APPFOLDER/ddsignfiles.dll /filelist:$(Build.ArtifactStagingDirectory)/MsiFiles2Notarize.json
  displayName: 'Sign .msi'

- bash: |
    security unlock-keychain -p $PRODUCTSIGN_KEYCHAIN_PASSWORD builder.keychain
    PACKAGES="$IOS_PKG $MAC_PKG"
    echo "Packages found at $PACKAGES"

    echo "$PACKAGES" | xargs python $(Build.SourcesDirectory)/release-scripts/sign_and_notarize.py --no_notarization -a "$APP_ID" -i "$INSTALL_ID" -u "$APPLE_ACCOUNT" -p "$APPLE_PASS" -t "$TEAM_ID" -d $(Build.SourcesDirectory)/package/notarized -e "$MAC_ENTITLEMENTS" -k "$KEYCHAIN"
    ls -R $(Build.SourcesDirectory)/package
  env:
    PRODUCTSIGN_KEYCHAIN_PASSWORD: $(OSX_KEYCHAIN_PASS)
    MAC_ENTITLEMENTS: $(Build.SourcesDirectory)/xamarin-macios/mac-entitlements.plist
    APP_ID: $(XamarinAppId)
    INSTALL_ID: $(XamarinAppId)
    APPLE_ACCOUNT: $(XamarinUserId)
    APPLE_PASS: $(XamarinPassword)
    TEAM_ID: $(TeamID)
    KEYCHAIN: $(SigningKeychain)
  name: notarize
  displayName: 'Signing Release Build'
  timeoutInMinutes: 90

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@3
  displayName: 'Install Notarizing Plugin'
  inputs:
    signType: 'Real'  # test is not present for mac..
    azureSubscription: 'MicroBuild Signing Task (DevDiv)'
    zipSources: false  # we do not use the feature and makes the installation to last 10/12 mins instead of < 1 min
  env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- pwsh: $(Build.SourcesDirectory)/release-scripts/notarize.ps1 -FolderForApps $(Build.SourcesDirectory)/package/notarized
  displayName: 'ESRP notarizing packages'
