parameters:
- name: enableDotnet
  type: boolean
  default: false

steps:

- checkout: self
  persistCredentials: true
  path: s/xamarin-macios

# Download the Html Report that was added by the tests job.
- task: DownloadPipelineArtifact@2
  displayName: Download packages
  inputs:
    patterns: '**'
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts

- powershell : |
    $packagePrefix = "https://bosstoragemirror.blob.core.windows.net/wrench/$Env:VIRTUAL_PATH/package"
    $files =  Get-ChildItem -Path "$(Build.SourcesDirectory)\artifacts\package" -File -Force -Name 
    $manifestFile = "$(Build.SourcesDirectory)\artifacts\package\manifest"
    foreach ($f in $files) {
      Add-Content -Path "$manifestFile" -Value "$packagePrefix/$f"
    }
    Add-Content -Path "$manifestFile" -Value "$packagePrefix/$artifacts.json"
    Add-Content -Path "$manifestFile" -Value "$packagePrefix/manifest"
  env:
    VIRTUAL_PATH: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)
  displayName: "Build manifest"

# Important needed for the next step
- template: generate-workspace-info.yml@templates
  parameters:
    GitHubToken: $(GitHub.Token)
    ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

- task: AzureFileCopy@3
  displayName: 'Publish package to Azure'
  name: upload
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)/package  # ideally, we would use a variable for this
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceBranchName)/$(Build.SourceVersion)
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure as latest'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceBranchName)/latest
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure per commit'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceVersion)
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- powershell: |
    $execPath="$Env:BUILD_SOURCESDIRECTORY\Xamarin.Build.Tasks\tools\BuildTasks\build-tasks.exe"

    if (-not (Test-Path $execPath -PathType Leaf)) {
        Write-Host "Build task not found at $execPath!"
    }

    $maciosPath="$Env:BUILD_SOURCESDIRECTORY"

    Write-Host "Exect path is $execPath" 
    Write-Host "Macios path is $maciosPath"
    Write-Host "$Env:VIRTUAL_PATH"
    Write-Host "Artifacts url wrench/$Env:VIRTUAL_PATH/package"

    Invoke-Expression "$execPath artifacts -s `"$maciosPath`" -a bosstoragemirror -c $Env:STORAGE_PASS -u `"wrench/$Env:VIRTUAL_PATH/package`" -d `"$(Build.SourcesDirectory)\artifacts\package`" -o `"$(Build.SourcesDirectory)\artifacts\package`""
  env:
    VIRTUAL_PATH: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)
    GITHUB_AUTH_TOKEN: $(GitHub.Token)
    STORAGE_PASS: $(auth-xamarin-bosstoragemirror-account-key)
  displayName: 'Generate artifacts.json'

# upload the artifacts.json to the build pipeline artifacts so that it can be consumed by other jobs to 
# get the required urls
- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/artifacts/package/artifacts.json
    artifactName: pkg-info
  continueOnError: true

- powershell: |

    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\tools\devops\automation\scripts\GitHub.psm1
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\tools\devops\automation\scripts\VSTS.psm1

    Dir "$(Build.SourcesDirectory)\artifacts\package"

    # $Env:STORAGE_URI/ ends with a /, annoying
    $pkgsVirtualUrl = "$Env:STORAGE_URI" +"$(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)/package"
    Write-Host "Urls is $pkgsVirtualUrl"

    $pkgsPath = "$(Build.SourcesDirectory)\artifacts\package"

    $iOSPkg = Get-ChildItem -Path $pkgsPath -File -Force -Name xamarin.ios-*.pkg
    Write-Host "iOS PKG is $iOSPkg"

    $macPkg = Get-ChildItem -Path $pkgsPath -File -Force -Name xamarin.mac-*.pkg
    Write-Host "mac PKG is $macPkg"

    # create an array with objects so that we can set each of the statuses:
    $statusInfo = @(
      @{
        Path = "$pkgsPath\\$iOSPkg";
        Context = "PKG-Xamarin.iOS";
        Description = $iOSPkg;
        TargetUrl = "$pkgsVirtualUrl/$iOSPkg";
        Error = "xamarin.ios pkg not found";
      },
      @{
        Path = "$pkgsPath\\notarized\\xamarin.ios-*.pkg";
        Context = "PKG-Xamarin.iOS-notarized"
        Description = "$iOSPkg (Notarized)" ;
        TargetUrl = "$pkgsVirtualUrl/notarized/$iOSPkg" ;
        Error = "Notarized xamarin.ios pkg not found" ;
      },
      @{
        Path = "$pkgsPath\\xamarin.mac-*.pkg" ;
        Context = "PKG-Xamarin.Mac" ;
        Description = "$macPkg" ;
        TargetUrl = "$pkgsVirtualUrl/$macPkg" ;
        Error = "xamarin.mac pkg not found." ;
      },
      @{
        Path = "$pkgsPath\\notarized\\xamarin.mac-*.pkg" ;
        Context = "PKG-Xamarin.Mac-notarized" ;
        Description = "$macPkg (Notarized)" ;
        TargetUrl = "$pkgsVirtualUrl/notarized/$macPkg" ;
        Error = "Notarized xamarin.mac pkg not found." ;
      },
      @{
        Path = "$pkgsPath\bundle.zip" ;
        Context = "bundle.zip" ;
        Description = "bundle.zip" ;
        TargetUrl = "$pkgsVirtualUrl/bundle.zip" ;
        Error = "bundle.zip not found." ;
      },
      @{
        Path = "$pkgsPath\msbuild.zip" ;
        Context = "msbuild.zip" ;
        Description = "msbuild.zip" ;
        TargetUrl = "$pkgsVirtualUrl/msbuild.zip" ;
        Error = "msbuild.zip not found." ;
      }
    )

    foreach ($info in $statusInfo) {
      if (Test-Path $info.Path -PathType Leaf) {
          Set-GitHubStatus -Status "success" -Description $info.Description -TargetUrl $info.TargetUrl  -Context $info.Context
      } else {
          Set-GitHubStatus -Status "error" -Description $info.Error -Context $info.Context
      }
    }
    if ($Env:ENABLE_DOTNET -eq "True" -and  $Env:SkipNugets -ne "True") {
      $nugets = Get-ChildItem -Path $pkgsPath -Filter *.nupkg -File -Name
      Write-Host $nugets 
      Write-Host "nuget count is $($nugets.Count)"

      if ($nugets.Count -gt 0) {
        Write-Host "Setting status to success."
        Set-GitHubStatus -Status "success" -Description "Nugets built." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets built)"
        Write-Host "Publishing result is $Env:NUGETS_PUBLISHED"
        if ($Env:NUGETS_PUBLISHED -ne "Failed") {
          Set-GitHubStatus -Status "success" -Description "Nugets published." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
        } else {
          Set-GitHubStatus -Status "error" -Description "Error when publishing nugets." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
        }
      } else {
        Write-Host "Setting nuget status to failure." 
        Set-GitHubStatus -Status "error" -Description "No nugets were built." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets built)"
        Set-GitHubStatus -Status "error" -Description "No nugets were published." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
      }
    }


    $msi = Get-ChildItem -Path $pkgsPath -Filter *.msi -File -Name

    foreach ($n in $msi) {
      Set-GitHubStatus -Status "success" -Description "$n" -TargetUrl "$pkgsVirtualUrl/$n" -Context "$n"
    }
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    GITHUB_TOKEN: $(GitHub.Token)
    ACCESSTOKEN: $(System.AccessToken)
    STORAGE_URI: $(Parameters.outputStorageUri)
    ${{ if eq(parameters.enableDotnet, true) }}:
      ENABLE_DOTNET: "True"
  displayName: 'Set GithubStatus'
