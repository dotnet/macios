//
// IncomingCallNotifications C# bindings
//
// Authors:
//	TJ Lambert  <t-anlamb@microsoft.com>
//
// Copyright 2019 Microsoft Corporation.
//

using System;
using CoreFoundation;
using Foundation;
using ObjCRuntime;

namespace IncomingCallNotifications {

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[Native]
	enum ICHandleType : long {
		Generic = 1,
		PhoneNumber = 2,
		EmailAddress = 3,
	}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[Native]
	enum ICDeclineReason : long {
		Generic,
		Cancelled,
		UserBusy,
		Unanswered,
	}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface ICHandle : NSCopying {

		[Export ("type")]
		ICHandleType Type { get; }

		[Export ("value", ArgumentSemantic.Copy)]
		string Value { get; }

		[DesignatedInitializer]
		[Export ("initWithType:value:")]
		IntPtr Constructor (ICHandleType type, string value);

		[Export ("isEqualToHandle:")]
		bool IsEqual (ICHandle handle);
	}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface ICNotification : NSCopying {

		[DesignatedInitializer]
		[Export ("initWithUUID:handle:")]
		IntPtr Constructor (NSUuid identifier, ICHandle handle);

		[Export ("identifier", ArgumentSemantic.Copy)]
		NSUuid Identifier { get; }

		[Export ("handle", ArgumentSemantic.Copy)]
		ICHandle PersonHandle { get; }

		[Export ("video", ArgumentSemantic.Assign)]
		bool Video { [Bind ("isVideo")] get; set; }
	}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[BaseType (typeof (NSObject))]
	[Model (AutoGeneratedName = true)] [Protocol]
	interface ICNotificationManagerDelegate {

		[Export ("notificationManager:didAcceptNotification:")]
		void DidAccept (ICNotificationManager notificationManager, ICNotification notification);

		[Export ("notificationManager:didDeclineNotification:reason:")]
		void DidDecline (ICNotificationManager notificationManager, ICNotification notification, ICDeclineReason reason);
	}

	interface IICNotificationManagerDelegate {}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface ICNotificationManager {

		[DesignatedInitializer]
		[Export ("initWithConfiguration:")]
		IntPtr Constructor (ICNotificationManagerConfiguration configuration);

		[Export ("setDelegate:queue:")]
		void SetDelegate ([NullAllowed] IICNotificationManagerDelegate @delegate, [NullAllowed] DispatchQueue queue);

		// no async because it does not make sense
		[Export ("postNotification:completion:")]
		void PostNotification (ICNotification notification, [NullAllowed] Action<NSError> completion);

		[Export ("cancelNotificationWithIdentifier:")]
		void CancelNotification (NSUuid identifier);
	}

	[iOS (13,0), Mac (10, 15, onlyOn64: true)]
	[BaseType (typeof (NSObject))]
	interface ICNotificationManagerConfiguration : NSCopying {

		[Export ("localizedDisplayName", ArgumentSemantic.Copy), NullAllowed]
		string LocalizedDisplayName { get; set; }
	}
}

