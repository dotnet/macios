# Main template that contains all the jobs that are required to run the device tests.
#
# The stage contains a single job to run the tests on a pool that is capable to run them.

parameters:

# string that is used to identify the status to be used to expose the result on GitHub
- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

# name of the pool that contains the iOS devices
- name: testPool
  type: string
  default: ''

# demand that has to be matched by a bot to be able to run the tests.
- name: extraBotDemands
  type: object
  default: []

- name: useXamarinStorage
  type: boolean
  default: false

- name: vsdropsPrefix
  type: string

- name: stageName
  type: string

- name: displayName
  type: string

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: makeTarget
  type: string
  default: 'vsts-device-tests' # target to be used to run the tests

- name: condition
  type: boolean
  default: true

- name: parseLabels
  type: boolean
  default: true

- name: testConfigurations
  type: object

- name: supportedPlatforms
  type: object

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: XcodeChannel
  type: string

- name: macOSName
  type: string

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  dependsOn:
  - build_packages
  - configure_build
  # we need to have the pkgs built and the device sets to be ran, that is decided via the labels or type of build during the build_packages stage
  condition: and(succeeded(), ${{ parameters.condition }})

  jobs:
  - job: "tests"
    condition: ne(stageDependencies.configure_build.configure.outputs['labels.skip_all_tests'], 'True')
    displayName: 'T:' 
    timeoutInMinutes: 1000
    variables:
      # old and ugly env var use by jenkins, we do have parts of the code that use it, contains the PR number
      PR_ID: $[ stageDependencies.configure_build.configure.outputs['labels.pr_number'] ]
      # set the branch variable name, this is required by jenkins and we have a lot of scripts that depend on it
      BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
      XHARNESS_LABELS: $[ stageDependencies.configure_build.configure.outputs['labels.xharness_labels'] ]
      DOTNET_PLATFORMS: $[ stageDependencies.configure_build.configure.outputs['configure_platforms.DOTNET_PLATFORMS'] ]
      ${{ if eq(parameters.testPool, '') }}:
        AgentPoolComputed: $(PRBuildPool)
      ${{ else }}:
        AgentPoolComputed: ${{ parameters.testPool }}
    pool:
      os: macOS
      name: $(AgentPoolComputed)
      demands:
      - Agent.OS -equals Darwin
      - macOS.Name -equals ${{ parameters.macOSName }}
      - XcodeChannel -equals ${{ parameters.XcodeChannel }}
      - ${{ each demand in parameters.extraBotDemands }}:
        - demand
    strategy:
      matrix: $[ stageDependencies.configure_build.configure.outputs['test_matrix.TEST_MATRIX'] ]

    templateContext:
      type: validationJob
      sdl:
        credscan:
          suppressionsFile: '$(System.DefaultWorkingDirectory)\\tools\\devops\\CredScanSuppressions.json'
      outputs:
      # Publish the simulator diagnostic logs
      - output: pipelineArtifact
        displayName: 'Publish Artifact: Simulator diagnostic info'
        artifactName: '$(MaciosUploadPrefix)diagnostic-simulator-info-$(Build.BuildId)-$(System.StageAttempt)-$(System.JobAttempt)-$(LABEL_WITH_PLATFORM)'
        path: $(System.DefaultWorkingDirectory)/diagnostic-sim-output
        postValidationJobArtifactName: diagnostic_sim_output_validation
        postValidationJobSourceRepositoryToCheckout: maccore
        condition: and(eq(variables['system.debug'], true), succeededOrFailed())
      # Upload TestSummary as an artifact.
      - output: pipelineArtifact
        displayName: 'Publish Artifact: TestSummary'
        artifactName: '$(MaciosUploadPrefix)TestSummary-$(TEST_PREFIX)-$(System.JobAttempt)'
        path: 'xamarin-macios/tests/TestSummary.md'
        postValidationJobArtifactName: test_summary_output_validation
        postValidationJobSourceRepositoryToCheckout: maccore
        condition: succeededOrFailed()
      # Create HtmlReport artifact. This serves two purposes:
      # 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
      # 2. Users can download this if they want.
      - output: pipelineArtifact
        displayName: 'Publish Artifact: HtmlReport'
        artifactName: '$(MaciosUploadPrefix)HtmlReport-$(TEST_PREFIX)-$(System.JobAttempt)'
        path: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
        postValidationJobArtifactName: html_report_output_validation
        postValidationJobSourceRepositoryToCheckout: maccore
        condition: succeededOrFailed()
      # Publish all the binlogs we collected in the previous step
      - output: pipelineArtifact
        displayName: 'Publish Artifact: All binlogs'
        artifactName: '$(MaciosUploadPrefix)all-binlogs-test-$(TEST_PREFIX)-$(Build.BuildId)-$(System.StageAttempt)-$(System.JobAttempt)'
        path: $(Build.ArtifactStagingDirectory)/all-binlogs
        postValidationJobArtifactName: all_binlogs_test_output_validation
        postValidationJobSourceRepositoryToCheckout: maccore
        condition: succeededOrFailed()

    steps:
    - bash: |
        env | sort
        env
      displayName: 'Dump env'
      name: DumpEnv
    - template: build.yml
      parameters:
        isPR: ${{ parameters.isPR }}
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        label: $(LABEL)
        labelWithPlatform: $(LABEL_WITH_PLATFORM)
        testsLabels: $(TESTS_LABELS)
        statusContext: $(STATUS_CONTEXT)
        testPlatform:  $(TEST_PLATFORM)
        useXamarinStorage: ${{ parameters.useXamarinStorage }}
        vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
        keyringPass: ${{ parameters.keyringPass }}
        testPrefix: $(TEST_PREFIX)
        makeTarget: ${{ parameters.makeTarget }}
        gitHubToken: ${{ parameters.gitHubToken }}
        xqaCertPass: ${{ parameters.xqaCertPass }}
