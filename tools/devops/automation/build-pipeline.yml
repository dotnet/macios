# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13760&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

  - repository: release-scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized
    endpoint: xamarin

variables:
- group: xamops-azdev-secrets
- group: Xamarin-Secrets
- group: Xamarin Signing
- group: Xamarin Release
- group: Xamarin Notarization
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: system.debug
  value: true
- name: SigningKeychain
  value: "builder.keychain"
- name: OSX_KEYCHAIN_PASS                                     # UNDONE: Override the OSX_KEYCHAIN_PASS to use same password as used by the iOS mac pool machines
  value: $(pass--lab--mac--builder--keychain)
- name: VSDropsPrefix
  value: 'https://vsdrop.corp.microsoft.com/file/v1/xamarin-macios/device-tests'
- name: USE_TCP_TUNNEL                                        # Needed to ensure that devices uses the usb cable to communicate with the devices to run the tests.
  value: true

trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*
    - yaml-pipeline                                           # UNDONE: Enable triggering of YAML pipeline changes - remove prior to merging the YAML pipeline build to main

stages:

- stage: governance_checks
  displayName: 'Governance Checks'
  dependsOn: []
  jobs:
    - job: governance
      displayName: 'Governance Checks'
      pool:
        vmImage: windows-latest
      steps:
      - template: templates/governance-checks.yml

- stage: build_packages
  displayName: 'Build'
  dependsOn: []
  jobs:
  - job: configure
    displayName: 'Configure build'
    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/configure-build.yml

  - job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
    pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
      vmImage: ubuntu-latest
    steps:
    - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

    # Selects appropriate agent pool based on trigger type (PR or CI)
    - template: templates/agent-pool-selector.yml

  - job: build
    dependsOn:
    - AgentPoolSelector
    - configure
    displayName: 'Build packages'
    timeoutInMinutes: 1000
    variables:
      AgentPoolComputed: $[ dependencies.AgentPoolSelector.outputs['setAgentPool.AgentPoolComputed'] ]
      # add all the variables that have been parsed by the configuration step. Could we have a less verbose way??
      # 
      # build-package
      # run-internal-tests
      # skip-packages
      # skip-nugets
      # skip-signing
      # skip-external-tests
      # trigger-device-tests
      # run-sample-tests
      # skip-packaged-xamarin-mac-tests
      BuildPackage: $[ dependencies.configure.outputs['labels.build-package'] ]
      RunInternalTests: $[ dependencies.configure.outputs['labels.run-internal-tests'] ]
      SkipPackages: $[ dependencies.configure.outputs['labels.skip-packages'] ]
      SkipNugets: $[ dependencies.configure.outputs['labels.skip-nugets'] ]
      SkipSigning: $[ dependencies.configure.outputs['labels.skip-signing'] ]
      SkipExternalTests: $[ dependencies.configure.outputs['labels.skip-external-tests'] ]
      TriggerDeviceTests: $[ dependencies.configure.outputs['labels.trigger-device-tests'] ]
      RunSampleTests: $[ dependencies.configure.outputs['labels.run-sample-tests'] ]
      SkipPackagedXamarinMacTests: $[ dependencies.configure.outputs['labels.skip-packaged-xamarin-mac-tests'] ]
    pool:
      name: $(AgentPoolComputed)
      demands:
      - Agent.OS -equals Darwin
      - Agent.OSVersion -equals 10.15
    workspace:
      clean: all

    steps:
    - template: templates/build-packages.yml

  - job: upload_azure_blob
    displayName: 'Upload packages to Azure'
    timeoutInMinutes: 1000
    dependsOn: build # can start as soon as the tests are done
    condition: and(succeeded(), eq (dependencies.build.outputs['configuration.BuildPkgs'], 'True')) # only run when we do have pkgs

    variables:
      Parameters.outputStorageUri: ''

    pool:
      name: VSEngDeploymentPool
      demands: agent.os -equals Windows_NT # we need to use a windows machine since vsdrops just works on them and the pool might have diff OS in the agents
      workspace:
        clean: all
    steps:
    - template: templates/upload-vsdrops.yml

  - job: upload_vsdrops
    displayName: 'Upload test results to VSDrops'
    timeoutInMinutes: 1000
    dependsOn: build # can start as soon as the tests are done
    condition: and(succeededOrFailed() , eq (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests

    pool:
      name: VSEngDeploymentPool
      demands: agent.os -equals Windows_NT # we need to use a windows machine since vsdrops just works on them and the pool might have diff OS in the agents
      workspace:
        clean: all
    steps:
    - template: templates/upload-vsdrops.yml
      parameters:
        devicePrefix: sim

  - job: upload_vsts_tests
    displayName: 'Upload xml to vsts'
    timeoutInMinutes: 1000
    dependsOn:  build # can start as soon as the tests are done
    condition: and(succeededOrFailed() , eq (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests
    pool:
      name: VSEngDeploymentPool
      demands: agent.os -equals Windows_NT #  not needed, but lest not waste our mac with devices, we have less.
      workspace:
        clean: all
    steps:
    - template: templates/upload-vsts-tests.yml

  # ideally we would use a matrix here, like:
  #  - job: device_tests
  #    displayName: 'Device tests'
  #    timeoutInMinutes: 1000
  #
  #    strategy:
  #      matrix:
  #        iOS32: # TODO: This bots should be moved to the ddfun pool
  #          deviceDemands: 'xismoke-32'
  #          testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-QA'
  #        iOS64:
  #          deviceDemands: 'ios'
  #          testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #        tvOS:
  #          deviceDemands: 'tvos'
  #          testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
  #          poolName: 'VSEng-Xamarin-Mac-Devices'
  #
  #    pool:
  #      name: $(poolName)
  #      demands: $(deviceDemands)
  #      workspace:
  #        clean: all
  #
  #    steps:
  #    - template: templates/device-tests.yml
  #
  # Unfortunally, variable expansion will not happen on the right time, and will result in an agent error, to fix that
  # we use a template for the test and we set each of the jobs. Not ideal, but is only a 3 jobs matrix

- template: templates/device-tests-stage.yml
  parameters:
    devicePrefix: 'ios32b'
    execute: 'runDevice32b'
    stageName: 'iOS32b Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-QA'
    WindowsDevicePool: 'VSEngDeploymentPool'
    useXamarinStorage: False
    testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests iOS32b'
    iOSDeviceDemand: 'xismoke-32'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/device-tests-stage.yml
  parameters:
    devicePrefix: 'ios64'
    execute: 'runDevice64b'
    stageName: 'iOS64 Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-Mac-Devices'
    WindowsDevicePool: 'VSEngDeploymentPool'
    useXamarinStorage: False
    testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests iOS'
    iOSDeviceDemand: 'ios'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/device-tests-stage.yml
  parameters:
    devicePrefix: 'tvos'
    execute: 'runDeviceTv'
    stageName: 'tvOS Device Tests'
    iOSDevicePool: 'VSEng-Xamarin-Mac-Devices'
    WindowsDevicePool: 'VSEngDeploymentPool'
    useXamarinStorage: False
    testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
    statusContext: 'VSTS: device tests tvOS'
    iOSDeviceDemand: 'tvos'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(xma-password)

- template: templates/mac-tests.yml
  parameters:
    stageName: 'Mac Mojave Tests'
    macPool: 'Hosted Mac Internal Mojave'

- template: templates/mac-tests.yml
  parameters:
    stageName: 'Mac High Sierra Tests'
    macPool: 'Hosted Mac Internal'

# TODO: Not the real step
- stage: sample_testing
  displayName: 'Sample testing'
  dependsOn:
  - build_packages
  condition: and(succeeded(), eq (stageDependencies.build_packages.build.outputs['configuration.RunSampleTests'], 'True')) 
  jobs:
  - job: sample_testing
    pool:
      vmImage: ubuntu-latest
    steps:
      # TODO: do parse labels
      - bash: |
          echo "Samples!"
        displayName: 'Sample testing'